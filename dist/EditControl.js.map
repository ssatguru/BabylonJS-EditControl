{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/EditControl.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EditControl","ActionType","babylonjs__WEBPACK_IMPORTED_MODULE_0__","mesh","camera","canvas","scale","eulerian","pickWidth","_this","this","_local","_snapT","_snapR","_transSnap","_rotSnap","Math","PI","_axesLen","_axesScale","_pickWidth","_redCol","_greenCol","_blueCol","_whiteCol","_yellowCol","_visibility","_lhsRhs","_ecMatrix","_ecTOcamera","_distFromCamera","_cameraTOec","_cameraNormal","_prevState","_hidden","_actionListener","_actionStartListener","_actionEndListener","_pDown","_pointerIsOver","_editing","_rotate2","_transBy","_snapTV","_snapS","_snapSV","_scaleSnap","_scale","_localX","_localY","_localZ","_eulerian","_snapRA","_transEnabled","_rotEnabled","_scaleEnabled","_guideSize","_tSnap","_tv1","_tv2","_tv3","_tm","_mesh","_mainCamera","_canvas","_checkQuaternion","_scene","getScene","_actHist","ActHist","computeWorldMatrix","_boundingDimesion","_getBoundingDimension","_setLocalAxes","_check_LHS_RHS","console","log","_ecRoot","rotationQuaternion","Identity","visibility","isPickable","_createMaterials","_createCommonAxes","parent","_createPickPlanes","_pointerdown","evt","_onPointerDown","_pointerup","_onPointerUp","_pointermove","_onPointerMove","addEventListener","_renderer","_renderLoopProcess","registerBeforeRender","getRoot","undefined","_issue","actualZ","Cross","Dot","position","getAbsolutePivotPoint","_setECRotation","_setECScale","getWorldMatrix","invertToRef","TransformCoordinatesToRef","_pALL","lookAt","LOCAL","subtractToRef","WORLD","_rotRotGuides","_rotPlanarGuides","_tXZ","_tZY","_tYX","_sXZ","_sZY","_sYX","rot","rotation","RotationYawPitchRollToRef","y","x","z","copyFrom","_isScaleUnEqual","getRotationMatrixToRef","FromRotationMatrixToRef","scaling","FromFloatArrayToRef","asArray","parentOnNormal","length","abs","FromFloatsToRef","rotX","atan","_rX","rotY","_rY","rotZ","_rZ","XZ","ZY","YX","ec","switchTo","refreshBoundingInfo","switchCamera","setUndoCount","setCapacity","undo","at","_callActionStartListener","_callActionListener","_callActionEndListener","redo","detach","removeEventListener","unregisterBeforeRender","removeAllActionListeners","_disposeAll","hide","disableTranslation","disableRotation","disableScaling","_hideCommonAxes","_xaxis","_yaxis","_zaxis","_showCommonAxes","show","enableTranslation","enableRotation","enableScaling","isHidden","dispose","_disposeMaterials","addActionListener","actionListener","removeActionListener","addActionStartListener","actionStartListener","removeActionStartListener","addActionEndListener","actionEndListener","removeActionEndListener","preventDefault","button","engine","getEngine","pointPos","getRenderingCanvas","width","pointerX","height","pointerY","pickResult","pick","_tX","_tY","_tZ","_tAll","_rAll","_sX","_sY","_sZ","_sAll","hit","_axisPicked","pickedMesh","childs","getChildren","name_1","_bXaxis","_bYaxis","_bZaxis","_setEditing","_pickedPlane","_getPickPlane","_prevPos","_getPosOnPickPlane","setTimeout","cam","can","_detachCamera","editing","_setActionType","_actionType","ROT","isEditing","isPointerLock","detachControl","isPointerOver","_onPointerOver","_prevOverMesh","_clearPrevOverMesh","_savedCol","color","_savedMat","material","_whiteMat","_restoreColor","attachControl","_hideBaxis","add","TRANS","SCALE","newPos","_doRotation","diff","subtract","_doTranslation","_doScaling","axis","_pXZ","_pZY","_pYX","_transWithSnap","_transBoundsMin","max","_transBoundsMax","min","trans","local","snapit","addInPlace","normalizeToRef","translate","setAbsolutePosition","absolutePosition","bbd","upVector","copyFromFloats","inPlane","_scaleWithSnap","_scaleBoundsMin","_scaleBoundsMax","meshMatrix","bb","getBoundingInfo","boundingBox","bd","maximum","minimum","prevPos","rAxis","angle","X","Y","Z","_getAngle2","useRightHandedSystem","_getAngle","normalize","rotate","toEulerAngles","pickinfo","pickedPoint","getRotationQuaternion","getPosition","isTranslationEnabled","_createTransAxes","_tCtl","_setVisibility","_all_tEnd","isRotationEnabled","returnEuler","euler","_rCtl","_createRotAxes","_all_rEnd","isScalingEnabled","_createScaleAxes","_sCtl","_all_sEnd","setScaleBounds","removeScaleBounds","setTransBounds","removeTransBounds","setRotBounds","_rotBoundsMin","_rotBoundsMax","removeRotBounds","guideAxes","CreateLines","al","renderingGroupId","CreatePlane","pickPlanes","_createPickableTrans","_createNonPickableTrans","tCtl","scene","tX","_extrudeBox","tY","clone","tZ","tXZ","size","tZY","tYX","bakeCurrentTransformIntoVertices","tAll","CreateBox","_all_t","_setPickableFalse","cl","tEndX","CreateCylinder","tEndY","tEndZ","tEndXZ","tEndZY","tEndYX","tEndAll","_redMat","_greenMat","_blueMat","_yellowMat","_tEndX","_tEndY","_tEndZ","_tEndXZ","_tEndZY","_tEndYX","_tEndAll","_setRenderingGroup","setRotGuideFull","_createPickableRot","_createNonPickableRot","rCtl","rX","_createTube","rY","rZ","rAll","_all_r","rEndX","_createCircle","rEndY","rEndZ","rEndAll","rEndAll2","Gray","_rEndX","_rEndY","_rEndZ","_rEndAll","_rEndAll2","meshes","v","map","w","shape","path","ExtrudeShape","double","points","cos","sin","CreateTube","NO_CAP","_createPickableScale","_createNonPickableScale","sCtl","sX","sY","sZ","sXZ","sZY","sYX","sAll","_all_s","sEndX","sEndY","sEndZ","sEndXZ","sEndZY","sEndYX","sEndAll","_sEndX","_sEndY","_sEndZ","_sEndXZ","_sEndZY","_sEndYX","_sEndAll","setVisibility","setLocal","isLocal","setTransSnap","setRotSnap","setScaleSnap","setTransSnapValue","setRotSnapValue","setScaleSnapValue","p1","p2","cameraPos","c2ec","mN","scaleToRef","addToRef","q","subtractInPlace","mv","CrossToRef","asin","_getStandardMaterial","col","mat","emissiveColor","diffuseColor","Black","specularColor","backFaceCulling","capacity","lastMax","acts","Array","last","current","error","act","Act","splice","shift","push","getActionType","perform","_p","_rQ","_rE","_s","_at","RotationYawPitchRoll"],"mappings":"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","file":"EditControl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\r\nimport {\r\n    AbstractMesh,\r\n    Axis,\r\n    BoundingBox,\r\n    Camera,\r\n    Color3,\r\n    LinesMesh,\r\n    Material,\r\n    Matrix,\r\n    Mesh,\r\n    MeshBuilder,\r\n    Node,\r\n    PickingInfo,\r\n    Quaternion,\r\n    Scene,\r\n    Space,\r\n    StandardMaterial,\r\n    Vector3,\r\n    TransformNode,\r\n    Engine\r\n}\r\n    from 'babylonjs';\r\n\r\n\r\n\r\nenum ActionType {\r\n    TRANS = 0,\r\n    ROT = 1,\r\n    SCALE = 2\r\n}\r\n\r\n/**\r\n * Draws a transform widget at the mesh's location (its pivot location).\r\n * The widget transforms(translates,rotates and scales) the mesh based on user\r\n * interactions with the widget.\r\n * The widget shows the mesh position and rotation at any time. \r\n * The widget follows the mesh constantly. \r\n * Note: An alternate approach would have been for the mesh to follow the widget.\r\n * The problem with the alternate approach - syncing the transforms\r\n * if the mesh was being transformed by entities other than the widget say physics \r\n * or script for example.\r\n * \r\n */\r\n\r\nexport class EditControl {\r\n    private _mesh: TransformNode;\r\n\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n    private _scene: Scene;\r\n    private _mainCamera: Camera;\r\n    //root of the edit control\r\n    private _ecRoot: Mesh;\r\n    private _local: boolean = true;\r\n    private _snapT: boolean = false;\r\n    private _snapR: boolean = false;\r\n    private _transSnap: number = 1;\r\n    private _rotSnap: number = Math.PI / 18;\r\n    private _axesLen: number = 0.4;\r\n    private _axesScale: number = 1;\r\n    //how close to an axis should we get before we can pick it \r\n    private _pickWidth: number = 0.02;\r\n    private _redMat: StandardMaterial;\r\n    private _greenMat: StandardMaterial;\r\n    private _blueMat: StandardMaterial;\r\n    private _whiteMat: StandardMaterial;\r\n    private _yellowMat: StandardMaterial;\r\n    private _redCol: Color3 = new Color3(1, 0.2, 0.2);\r\n    private _greenCol: Color3 = new Color3(0.2, 1, 0.2);\r\n    private _blueCol: Color3 = new Color3(0.2, 0.2, 1);\r\n    private _whiteCol: Color3 = new Color3(1, 1, 1);\r\n    private _yellowCol: Color3 = new Color3(1, 1, 0.2);\r\n\r\n    private _actHist: ActHist;\r\n    private _renderer: () => void;\r\n    private _pointerdown: EventListener;\r\n    private _pointerup: EventListener;\r\n    private _pointermove: EventListener;\r\n    //axes visibility\r\n    private _visibility: number = 0.75;\r\n\r\n    //lhs-rhs issue. lhs mesh in rhs or rhs mesh in lhs\r\n    private _lhsRhs: boolean = false;\r\n\r\n    public constructor(mesh: TransformNode, camera: Camera, canvas: HTMLCanvasElement, scale?: number, eulerian?: boolean, pickWidth?: number) {\r\n\r\n        this._mesh = mesh;\r\n        this._mainCamera = camera;\r\n        this._canvas = canvas;\r\n\r\n        if (scale != null) {\r\n            this._axesScale = scale;\r\n        }\r\n\r\n        if (eulerian !== null) {\r\n            this._eulerian = eulerian;\r\n        } else {\r\n            this._eulerian = false;\r\n        }\r\n        this._checkQuaternion();\r\n\r\n        if (pickWidth != null) {\r\n            this._pickWidth = pickWidth;\r\n        }\r\n\r\n        this._scene = mesh.getScene();\r\n        this._actHist = new ActHist(mesh, 10);\r\n\r\n        mesh.computeWorldMatrix(true);\r\n        this._boundingDimesion = this._getBoundingDimension(mesh);\r\n        this._setLocalAxes(mesh);\r\n        this._lhsRhs = this._check_LHS_RHS(mesh);\r\n        console.log(\"lhs rhs issue \" + this._lhsRhs);\r\n\r\n        //build the edit control axes\r\n        this._ecRoot = new Mesh(\"\", this._scene);\r\n        this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        this._ecRoot.visibility = 0;\r\n        this._ecRoot.isPickable = false;\r\n\r\n        this._createMaterials(this._scene);\r\n\r\n        let guideAxes: Mesh = this._createCommonAxes();\r\n        guideAxes.parent = this._ecRoot;\r\n\r\n        //build the pickplanes\r\n        let pickPlanes: Mesh = this._createPickPlanes();\r\n        pickPlanes.parent = this._ecRoot;\r\n\r\n        this._pointerdown = (evt) => { return this._onPointerDown(evt) };\r\n        this._pointerup = (evt) => { return this._onPointerUp(evt) };\r\n        this._pointermove = (evt) => { return this._onPointerMove(evt) };\r\n\r\n        //use canvas rather than scene to handle pointer events\r\n        //scene cannot have mutiple eventlisteners for an event\r\n        //with canvas one will have to do ones own pickinfo generation.\r\n\r\n        canvas.addEventListener(\"pointerdown\", this._pointerdown, false);\r\n        canvas.addEventListener(\"pointerup\", this._pointerup, false);\r\n        canvas.addEventListener(\"pointermove\", this._pointermove, false);\r\n\r\n\r\n        this._renderer = () => { return this._renderLoopProcess() };\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public getRoot(): AbstractMesh {\r\n        return this._ecRoot;\r\n    }\r\n\r\n    //make sure that if eulerian is set to false then mesh's rotation is in quaternion\r\n    //throw error and exit if not so.\r\n    private _checkQuaternion() {\r\n        if (!this._eulerian) {\r\n            if ((this._mesh.rotationQuaternion == null) || (this._mesh.rotationQuaternion == undefined)) {\r\n                throw \"Error: Eulerian is set to false but the mesh's rotationQuaternion is not set.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * \r\n        * if no parent then we are ok.\r\n        * If parent and parent has issue then we have issue.\r\n        * \r\n        */\r\n    private _check_LHS_RHS(mesh: TransformNode) {\r\n        let _issue: boolean = false;\r\n        let root: Node = mesh.parent;\r\n        if (root == null) return false;\r\n        this._setLocalAxes(root);\r\n        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, this._localZ) < 0) _issue = true;\r\n        else _issue = false;\r\n        this._setLocalAxes(mesh);\r\n        return _issue;\r\n    }\r\n\r\n    private _ecMatrix: Matrix = new Matrix();\r\n    //edit control to camera vector\r\n    private _ecTOcamera: Vector3 = new Vector3(0, 0, 0);\r\n    private _renderLoopProcess() {\r\n\r\n        //sync the edit control position and rotation with that of mesh\r\n        this._ecRoot.position = this._mesh.getAbsolutePivotPoint();\r\n        this._setECRotation();\r\n\r\n        //scale the EditControl so it seems at the same distance from camera/user\r\n        this._setECScale();\r\n\r\n        //rotate the free move,rotate,scale pick plane to face the camera/user\r\n        if (this._local) {\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            //note pALL is child of ecRoot hence lookAt in local space\r\n            this._pALL.lookAt(this._ecTOcamera, 0, 0, 0, Space.LOCAL);\r\n        } else {\r\n            this._mainCamera.position.subtractToRef(this._ecRoot.position, this._ecTOcamera);\r\n            this._pALL.lookAt(this._mainCamera.position, 0, 0, 0, Space.WORLD);\r\n        }\r\n\r\n        //rotate the rotation and planar guide to face the camera/user\r\n        if (this._rotEnabled) {\r\n            this._rotRotGuides();\r\n        }\r\n        else if (this._transEnabled) this._rotPlanarGuides(this._tXZ, this._tZY, this._tYX);\r\n        else if (this._scaleEnabled) this._rotPlanarGuides(this._sXZ, this._sZY, this._sYX);\r\n\r\n        //check pointer over axes only during pointer moves\r\n        //this.onPointerOver();\r\n    }\r\n\r\n    /**\r\n     * sets rotaion of edit control to that of the mesh\r\n     */\r\n    private _setECRotation() {\r\n        if (this._local) {\r\n            if (this._mesh.parent == null) {\r\n                if (this._eulerian) {\r\n                    let rot: Vector3 = this._mesh.rotation;\r\n                    Quaternion.RotationYawPitchRollToRef(rot.y, rot.x, rot.z, this._ecRoot.rotationQuaternion);\r\n                } else {\r\n                    this._ecRoot.rotationQuaternion.copyFrom(this._mesh.rotationQuaternion);\r\n                }\r\n            } else {\r\n\r\n                if (this._isScaleUnEqual(this._mesh)) return;\r\n\r\n                this._mesh.getWorldMatrix().getRotationMatrixToRef(this._tm);\r\n                Quaternion.FromRotationMatrixToRef(this._tm, this._ecRoot.rotationQuaternion);\r\n                //this._ecRoot.rotationQuaternion.normalize();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * checks if any of the mesh's ancestors has non uniform scale\r\n     */\r\n    private _isScaleUnEqual(mesh: TransformNode): boolean {\r\n        if (mesh.parent == null) return false;\r\n        while (mesh.parent != null) {\r\n            if (((<Mesh>mesh.parent).scaling.x != (<Mesh>mesh.parent).scaling.y ||\r\n                (<Mesh>mesh.parent).scaling.y != (<Mesh>mesh.parent).scaling.z)) {\r\n                return true;\r\n            } else {\r\n                mesh = <Mesh>mesh.parent;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //how far away from camera should the edit control appear to be\r\n    private _distFromCamera: number = 2;\r\n    //vector from camera to edit control\r\n    private _cameraTOec: Vector3 = new Vector3(0, 0, 0);\r\n    private _cameraNormal: Vector3 = new Vector3(0, 0, 0);\r\n    private _setECScale() {\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n        Vector3.FromFloatArrayToRef(this._mainCamera.getWorldMatrix().asArray(), 8, this._cameraNormal);\r\n\r\n        //get distance of edit control from the camera plane \r\n        //project \"camera to edit control\" vector onto the camera normal\r\n        let parentOnNormal: number = Vector3.Dot(this._cameraTOec, this._cameraNormal) / this._cameraNormal.length();\r\n\r\n        let s: number = Math.abs(parentOnNormal / this._distFromCamera);\r\n        Vector3.FromFloatsToRef(s, s, s, this._ecRoot.scaling);\r\n        //Vector3.FromFloatsToRef(s,s,s,this.pALL.scaling);\r\n    }\r\n\r\n\r\n    //rotate the rotation guides so that they are facing the camera\r\n    private _rotRotGuides() {\r\n        let rotX = Math.atan(this._ecTOcamera.y / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rX.rotation.x = -rotX;\r\n        } else {\r\n            this._rX.rotation.x = -rotX - Math.PI;\r\n        }\r\n\r\n        let rotY = Math.atan(this._ecTOcamera.x / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rY.rotation.y = rotY;\r\n        } else {\r\n            this._rY.rotation.y = rotY + Math.PI;\r\n        }\r\n\r\n        let rotZ = Math.atan(this._ecTOcamera.x / this._ecTOcamera.y);\r\n        if (this._ecTOcamera.y >= 0) {\r\n            this._rZ.rotation.z = -rotZ;\r\n        } else {\r\n            this._rZ.rotation.z = -rotZ - Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotate the planar guide so that they are facing the camera\r\n     */\r\n    private _rotPlanarGuides(XZ: Mesh, ZY: Mesh, YX: Mesh) {\r\n        let ec: Vector3 = this._ecTOcamera;\r\n\r\n        XZ.rotation.x = 0;\r\n        XZ.rotation.y = 0;\r\n        XZ.rotation.z = 0;\r\n\r\n        ZY.rotation.x = 0;\r\n        ZY.rotation.y = 0;\r\n        ZY.rotation.z = 0;\r\n\r\n        YX.rotation.x = 0;\r\n        YX.rotation.y = 0;\r\n        YX.rotation.z = 0;\r\n\r\n        if (ec.x <= 0 && ec.y >= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x <= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public switchTo(mesh: TransformNode, eulerian?: boolean) {\r\n        mesh.computeWorldMatrix(true);\r\n        this._mesh = mesh;\r\n        if (eulerian != null) {\r\n            this._eulerian = eulerian;\r\n        }\r\n        this._checkQuaternion();\r\n        this._setLocalAxes(mesh);\r\n        this._actHist = new ActHist(mesh, 10);\r\n        this._lhsRhs = this._check_LHS_RHS(mesh);\r\n        this.refreshBoundingInfo();\r\n    }\r\n\r\n    public switchCamera(camera: Camera) {\r\n        this._mainCamera = camera;\r\n    }\r\n\r\n    public setUndoCount(c: number) {\r\n        this._actHist.setCapacity(c);\r\n    }\r\n\r\n    public undo() {\r\n        let at: number = this._actHist.undo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    public redo() {\r\n        let at: number = this._actHist.redo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    /**\r\n     * detach the edit control from the mesh and dispose off all\r\n     * resources created by the edit control\r\n     */\r\n    public detach() {\r\n        this._canvas.removeEventListener(\"pointerdown\", this._pointerdown, false);\r\n        this._canvas.removeEventListener(\"pointerup\", this._pointerup, false);\r\n        this._canvas.removeEventListener(\"pointermove\", this._pointermove, false);\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.removeAllActionListeners();\r\n        this._disposeAll();\r\n    }\r\n    private _prevState: String = \"\";\r\n    private _hidden: boolean = false;\r\n\r\n    /**\r\n     * hide the edit control. use show() to unhide the control.\r\n     */\r\n    public hide() {\r\n        this._hidden = true;\r\n        if (this._transEnabled) {\r\n            this._prevState = \"T\";\r\n            this.disableTranslation();\r\n        } else if (this._rotEnabled) {\r\n            this._prevState = \"R\";\r\n            this.disableRotation();\r\n        } else if (this._scaleEnabled) {\r\n            this._prevState = \"S\";\r\n            this.disableScaling();\r\n        }\r\n        this._hideCommonAxes();\r\n    }\r\n\r\n    private _hideCommonAxes() {\r\n        this._xaxis.visibility = 0;\r\n        this._yaxis.visibility = 0;\r\n        this._zaxis.visibility = 0;\r\n    }\r\n    private _showCommonAxes() {\r\n        this._xaxis.visibility = this._visibility;\r\n        this._yaxis.visibility = this._visibility;\r\n        this._zaxis.visibility = this._visibility;\r\n    }\r\n    /**\r\n     * unhide the editcontrol hidden using the hide() method\r\n     */\r\n    public show() {\r\n        this._hidden = false;\r\n        this._showCommonAxes();\r\n        if (this._prevState == \"T\") this.enableTranslation();\r\n        else if (this._prevState == \"R\") this.enableRotation();\r\n        else if (this._prevState == \"S\") this.enableScaling();\r\n    }\r\n\r\n    /**\r\n     * check if the editcontrol was hidden using the hide() methods\r\n     */\r\n    public isHidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    private _disposeAll() {\r\n        this._ecRoot.dispose();\r\n        this._disposeMaterials();\r\n        this._actHist = null;\r\n    }\r\n\r\n    private _actionListener: (actionType: number) => void = null;\r\n    private _actionStartListener: (actionType: number) => void = null;\r\n    private _actionEndListener: (actionType: number) => void = null;\r\n\r\n    public addActionListener(actionListener: (actionType: number) => void) {\r\n        this._actionListener = actionListener;\r\n    }\r\n    public removeActionListener() {\r\n        this._actionListener = null;\r\n    }\r\n    public addActionStartListener(actionStartListener: (actionType: number) => void) {\r\n        this._actionStartListener = actionStartListener;\r\n    }\r\n    public removeActionStartListener() {\r\n        this._actionStartListener = null;\r\n    }\r\n    public addActionEndListener(actionEndListener: (actionType: number) => void) {\r\n        this._actionEndListener = actionEndListener;\r\n    }\r\n    public removeActionEndListener() {\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    public removeAllActionListeners() {\r\n        this._actionListener = null;\r\n        this._actionStartListener = null;\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    private _pDown: boolean = false;\r\n\r\n    private _axisPicked: Mesh;\r\n\r\n    private _onPointerDown(evt: Event) {\r\n        evt.preventDefault();\r\n        this._pDown = true;\r\n        if ((<PointerEvent>evt).button != 0) return;\r\n        let engine : Engine = this._scene.getEngine();\r\n        let pointPos : number[] = [\r\n            (engine.isPointerLock)?engine.getRenderingCanvas().width*0.5 : this._scene.pointerX,\r\n            (engine.isPointerLock)?engine.getRenderingCanvas().height*0.5 : this._scene.pointerY\r\n        ];\r\n        let pickResult: PickingInfo = this._scene.pick(pointPos[0], pointPos[1], (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if ((this._scaleEnabled)) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickResult.hit) {\r\n            //this.setAxesVisiblity(0);\r\n            this._axisPicked = <Mesh>pickResult.pickedMesh;\r\n            let childs: Node[] = this._axisPicked.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).visibility = this._visibility;\r\n            } else {\r\n                this._axisPicked.visibility = this._visibility;\r\n            }\r\n            let name: string = this._axisPicked.name;\r\n            if ((name == \"X\")) this._bXaxis.visibility = 1;\r\n            else if ((name == \"Y\")) this._bYaxis.visibility = 1;\r\n            else if ((name == \"Z\")) this._bZaxis.visibility = 1;\r\n            else if ((name == \"XZ\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            } else if ((name == \"ZY\")) {\r\n                this._bZaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n            } else if ((name == \"YX\")) {\r\n                this._bYaxis.visibility = 1;\r\n                this._bXaxis.visibility = 1;\r\n            } else if ((name == \"ALL\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            }\r\n            this._setEditing(true);\r\n            //lets find out where we are on the pickplane\r\n            this._pickedPlane = this._getPickPlane(this._axisPicked);\r\n            if (this._pickedPlane != null) {\r\n                this._prevPos = this._getPosOnPickPlane();\r\n            } else {\r\n                this._prevPos = null;\r\n            }\r\n            window.setTimeout(((cam, can) => { return this._detachCamera(cam, can) }), 0, this._mainCamera, this._canvas);\r\n        }\r\n    }\r\n\r\n    private _setEditing(editing: boolean) {\r\n        this._editing = editing;\r\n        if (editing) {\r\n            this._setActionType();\r\n            if (this._actionType == ActionType.ROT) {\r\n                this._snapRA = 0;\r\n            }\r\n            this._callActionStartListener(this._actionType);\r\n        } else {\r\n            this._callActionEndListener(this._actionType);\r\n        }\r\n    }\r\n\r\n    public isEditing(): boolean {\r\n        return this._editing;\r\n    }\r\n\r\n    /**\r\n     * no camera movement during edit\r\n     */\r\n    private _detachCamera(cam: Object, can: Object) {\r\n        let camera: Camera = <Camera>cam;\r\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>can;\r\n        let engine : Engine = this._scene.getEngine();\r\n        if(!engine.isPointerLock){\r\n            camera.detachControl(canvas)\r\n        }        \r\n    }\r\n\r\n    private _prevOverMesh: Mesh;\r\n\r\n    private _pointerIsOver: boolean = false;\r\n\r\n    public isPointerOver(): boolean {\r\n        return this._pointerIsOver;\r\n    }\r\n    private _savedMat: Material;\r\n    private _savedCol: Color3;\r\n    private _onPointerOver() {\r\n        //if(this.pDown) return;\r\n        let engine : Engine = this._scene.getEngine();\r\n        let pointPos : number[] = [\r\n            (engine.isPointerLock)?engine.getRenderingCanvas().width*0.5 : this._scene.pointerX,\r\n            (engine.isPointerLock)?engine.getRenderingCanvas().height*0.5 : this._scene.pointerY\r\n        ];\r\n        let pickResult: PickingInfo = this._scene.pick(pointPos[0], pointPos[1], (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if (this._scaleEnabled) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n        if (pickResult.hit) {\r\n            //if we are still over the same axis mesh then don't do anything\r\n            if (<Mesh>pickResult.pickedMesh != this._prevOverMesh) {\r\n                this._pointerIsOver = true;\r\n                //if we moved directly from one axis mesh to this then clean up the prev axis mesh\r\n                this._clearPrevOverMesh();\r\n                this._prevOverMesh = <Mesh>pickResult.pickedMesh;\r\n                if (this._rotEnabled) {\r\n                    this._savedCol = (<LinesMesh>this._prevOverMesh.getChildren()[0]).color;\r\n                    (<LinesMesh>this._prevOverMesh.getChildren()[0]).color = this._whiteCol;\r\n                } else {\r\n                    let childs: Node[] = this._prevOverMesh.getChildren();\r\n                    if (childs.length > 0) {\r\n                        this._savedMat = (<Mesh>childs[0]).material;\r\n                        (<Mesh>childs[0]).material = this._whiteMat;\r\n                    } else {\r\n                        this._savedMat = this._prevOverMesh.material;\r\n                        this._prevOverMesh.material = this._whiteMat;\r\n                    }\r\n                }\r\n                if (this._prevOverMesh.name == \"X\") {\r\n                    this._xaxis.color = this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Y\") {\r\n                    this._yaxis.color = this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Z\") {\r\n                    this._zaxis.color = this._whiteCol;\r\n                }\r\n            }\r\n        } else {\r\n            this._pointerIsOver = false;\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //clean up any axis we might have been howering over before\r\n    private _clearPrevOverMesh() {\r\n        if (this._prevOverMesh != null) {\r\n            this._prevOverMesh.visibility = 0;\r\n            this._restoreColor(this._prevOverMesh);\r\n        }\r\n    }\r\n\r\n    private _restoreColor(mesh: Mesh) {\r\n        switch (mesh.name) {\r\n            case \"X\":\r\n                this._xaxis.color = this._redCol;\r\n                break;\r\n            case \"Y\":\r\n                this._yaxis.color = this._greenCol;\r\n                break;\r\n            case \"Z\":\r\n                this._zaxis.color = this._blueCol;\r\n                break;\r\n        }\r\n\r\n        if (this._rotEnabled) {\r\n            (<LinesMesh>mesh.getChildren()[0]).color = this._savedCol;\r\n        } else {\r\n            let childs: Node[] = mesh.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).material = this._savedMat;\r\n            } else {\r\n                mesh.material = this._savedMat;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _editing: boolean = false;\r\n\r\n    private _onPointerUp(evt: Event) {\r\n        this._pDown = false;\r\n        if (this._editing) {\r\n            let engine : Engine = this._scene.getEngine();\r\n            if(!engine.isPointerLock){\r\n                this._mainCamera.attachControl(this._canvas);\r\n            }  \r\n            this._setEditing(false);\r\n            //this.setAxesVisiblity(1);\r\n            this._hideBaxis();\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n            this._actHist.add(this._actionType);\r\n        }\r\n    }\r\n\r\n    private _actionType: number;\r\n    private _setActionType() {\r\n        if (this._transEnabled) {\r\n            this._actionType = ActionType.TRANS;\r\n        } else if ((this._rotEnabled)) {\r\n            this._actionType = ActionType.ROT;\r\n        } else if ((this._scaleEnabled)) {\r\n            this._actionType = ActionType.SCALE;\r\n        }\r\n    }\r\n\r\n    private _callActionListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionListener != null) {\r\n            this._actionListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionStartListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionStartListener != null) {\r\n            this._actionStartListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionEndListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionEndListener != null) {\r\n            this._actionEndListener(at);\r\n        }\r\n\r\n    }\r\n\r\n    private _prevPos: Vector3;\r\n    private _onPointerMove(evt: Event) {\r\n\r\n        if (!this._pDown) {\r\n            this._onPointerOver();\r\n            return;\r\n        }\r\n        if (!this._editing) return;\r\n        if (this._prevPos == null) return;\r\n\r\n        let newPos: Vector3 = this._getPosOnPickPlane();\r\n\r\n        if (newPos == null) return;\r\n\r\n        if (this._rotEnabled) {\r\n            this._doRotation(this._mesh, this._axisPicked, newPos, this._prevPos);\r\n        } else {\r\n            let diff: Vector3 = newPos.subtract(this._prevPos);\r\n            if (diff.x == 0 && diff.y == 0 && diff.z == 0) return;\r\n            if (this._transEnabled) {\r\n                this._doTranslation(diff);\r\n            } else {\r\n                if (this._scaleEnabled && this._local) this._doScaling(diff);\r\n            }\r\n        }\r\n        this._prevPos = newPos;\r\n        this._callActionListener(this._actionType);\r\n    }\r\n\r\n\r\n    //rotate differently if camera is too close to the rotation plane\r\n    private _rotate2: boolean = false;\r\n    private _getPickPlane(axis: Mesh): Mesh {\r\n        let n: string = axis.name;\r\n        if (this._transEnabled || this._scaleEnabled) {\r\n            if (n == \"XZ\") return this._pXZ;\r\n            else if (n == \"ZY\") return this._pZY;\r\n            else if (n == \"YX\") return this._pYX;\r\n            else if (n == \"ALL\") return this._pALL;\r\n            else {\r\n                //get the position of camera in the edit control frame of reference\r\n                this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n                Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n                let c = this._ecTOcamera;\r\n                if (n === \"X\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.z)) {\r\n                        return this._pXZ;\r\n                    } else return this._pYX;\r\n                } else if (n === \"Z\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.x)) {\r\n                        return this._pXZ;\r\n                    } else return this._pZY;\r\n                } else if (n === \"Y\") {\r\n                    if (Math.abs(c.z) > Math.abs(c.x)) {\r\n                        return this._pYX;\r\n                    } else return this._pZY;\r\n                }\r\n            }\r\n        } else if (this._rotEnabled) {\r\n            this._rotate2 = false;\r\n            //get the position of camera in the edit control frame of reference\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            let c = this._ecTOcamera;\r\n            //if camera is too close to the rotation plane then use alternate rotation process\r\n            switch (n) {\r\n                case \"X\":\r\n                    if (Math.abs(c.x) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pZY;\r\n                case \"Y\":\r\n                    if (Math.abs(c.y) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pXZ;\r\n                case \"Z\":\r\n                    if (Math.abs(c.z) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pYX;\r\n                default:\r\n                    return this._pALL;\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    //TODO when translating, the orientation of pALL keeps changing\r\n    //TODo this is not so with rotation or scaling\r\n    //TODO so for translation instead of pALL maybe we should use the camera view plane for picking\r\n\r\n    private _transBy: Vector3 = new Vector3(0, 0, 0);\r\n    private _doTranslation(diff: Vector3) {\r\n\r\n        if ((this._mesh.parent != null) && this._isScaleUnEqual(this._mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(this._mesh);\r\n        }\r\n\r\n        let n: string = this._axisPicked.name;\r\n\r\n        this._transBy.x = 0; this._transBy.y = 0; this._transBy.z = 0;\r\n\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            else this._transBy.x = diff.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            else this._transBy.y = diff.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            else this._transBy.z = diff.z;\r\n        }\r\n\r\n        this._transWithSnap(this._mesh, this._transBy, this._local);\r\n\r\n        // bound the translation\r\n        if (this._transBoundsMin) {\r\n            this._mesh.position.x = Math.max(this._mesh.position.x, this._transBoundsMin.x);\r\n            this._mesh.position.y = Math.max(this._mesh.position.y, this._transBoundsMin.y);\r\n            this._mesh.position.z = Math.max(this._mesh.position.z, this._transBoundsMin.z);\r\n        }\r\n        if (this._transBoundsMax) {\r\n            this._mesh.position.x = Math.min(this._mesh.position.x, this._transBoundsMax.x);\r\n            this._mesh.position.y = Math.min(this._mesh.position.y, this._transBoundsMax.y);\r\n            this._mesh.position.z = Math.min(this._mesh.position.z, this._transBoundsMax.z);\r\n        }\r\n\r\n        this._mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _snapTV: Vector3 = new Vector3(0, 0, 0);\r\n    private _transWithSnap(mesh: TransformNode, trans: Vector3, local: boolean) {\r\n        if (this._snapT) {\r\n            let snapit: boolean = false;\r\n            this._snapTV.addInPlace(trans);\r\n            if (Math.abs(this._snapTV.x) > this._tSnap.x) {\r\n                if (this._snapTV.x > 0) trans.x = this._tSnap.x; else trans.x = -this._tSnap.x;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.y) > this._tSnap.y) {\r\n                if (this._snapTV.y > 0) trans.y = this._tSnap.y; else trans.y = -this._tSnap.y;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.z) > this._tSnap.z) {\r\n                if (this._snapTV.z > 0) trans.z = this._tSnap.z; else trans.z = -this._tSnap.z;\r\n                snapit = true;\r\n            }\r\n            if (snapit) {\r\n                if (Math.abs(trans.x) !== this._tSnap.x) trans.x = 0;\r\n                if (Math.abs(trans.y) !== this._tSnap.y) trans.y = 0;\r\n                if (Math.abs(trans.z) !== this._tSnap.z) trans.z = 0;\r\n                Vector3.FromFloatsToRef(0, 0, 0, this._snapTV);\r\n                snapit = false;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (local) {\r\n            //locallyTranslate moves the mesh wrt the absolute location not pivotlocation :(\r\n            //this.mesh.locallyTranslate(trans);\r\n            //\r\n            this._localX.normalizeToRef(this._tv1);\r\n            this._localY.normalizeToRef(this._tv2);\r\n            this._localZ.normalizeToRef(this._tv3);\r\n            this._mesh.translate(this._tv1, trans.x, Space.WORLD);\r\n            this._mesh.translate(this._tv2, trans.y, Space.WORLD);\r\n            this._mesh.translate(this._tv3, trans.z, Space.WORLD);\r\n        } else {\r\n            if (this._mesh.parent == null) {\r\n                this._mesh.position.addInPlace(trans);\r\n            } else {\r\n                this._mesh.setAbsolutePosition(trans.addInPlace(this._mesh.absolutePosition));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private _snapS: boolean = false;\r\n    private _snapSV: Vector3 = new Vector3(0, 0, 0);\r\n    private _scaleSnap: number = 0.25;\r\n    private _scale: Vector3 = new Vector3(0, 0, 0);\r\n    private _doScaling(diff: Vector3) {\r\n        this._setLocalAxes(this._mesh);\r\n\r\n        this._scale.x = 0;\r\n        this._scale.y = 0;\r\n        this._scale.z = 0;\r\n        let n: string = this._axisPicked.name;\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n            this._scale.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n            //if(this.lhsRhs) this.scale.x=-this.scale.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n            this._scale.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n            this._scale.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n        }\r\n\r\n        //as the mesh becomes large reduce the amount by which we scale.\r\n        let bbd = this._boundingDimesion;\r\n        this._scale.x = this._scale.x / bbd.x;\r\n        this._scale.y = this._scale.y / bbd.y;\r\n        this._scale.z = this._scale.z / bbd.z;\r\n\r\n        if (n == \"ALL\") {\r\n            //project movement along camera up vector\r\n            //if up then scale up else scale down\r\n            let s: number = Vector3.Dot(diff, this._mainCamera.upVector);\r\n            s = s / Math.max(bbd.x, bbd.y, bbd.z);\r\n            this._scale.copyFromFloats(s, s, s);\r\n        } else {\r\n            let inPlane: boolean = false;\r\n            if (n == \"XZ\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.x) > Math.abs(this._scale.z)) {\r\n                    this._scale.z = this._scale.x;\r\n                } else this._scale.x = this._scale.z;\r\n            } else if (n == \"ZY\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.z) > Math.abs(this._scale.y)) {\r\n                    this._scale.y = this._scale.z;\r\n                } else this._scale.z = this._scale.y;\r\n            } else if (n == \"YX\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.y) > Math.abs(this._scale.x)) {\r\n                    this._scale.x = this._scale.y;\r\n                } else this._scale.y = this._scale.x;\r\n            }\r\n            if (inPlane) {\r\n                //check if the mouse/pointer was moved towards camera or away from camera\r\n                //if towards then scale up else scale down\r\n                this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n                let s: number = Vector3.Dot(diff, this._cameraTOec);\r\n                this._scale.x = Math.abs(this._scale.x);\r\n                this._scale.y = Math.abs(this._scale.y);\r\n                this._scale.z = Math.abs(this._scale.z);\r\n                if (s > 0) {\r\n                    if (this._mesh.scaling.x > 0) this._scale.x = -this._scale.x;\r\n                    //if(this.lhsRhs) this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.y > 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z > 0) this._scale.z = -this._scale.z;\r\n                } else {\r\n                    //this.scale.x=Math.abs(this.scale.x);\r\n                    //if(this.lhsRhs) this.scale.y=-Math.abs(this.scale.y);\r\n                    //else this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n                    if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this._scaleWithSnap(this._mesh, this._scale);\r\n\r\n        // bound the scale\r\n        if (this._scaleBoundsMin) {\r\n            this._mesh.scaling.x = Math.max(this._mesh.scaling.x, this._scaleBoundsMin.x);\r\n            this._mesh.scaling.y = Math.max(this._mesh.scaling.y, this._scaleBoundsMin.y);\r\n            this._mesh.scaling.z = Math.max(this._mesh.scaling.z, this._scaleBoundsMin.z);\r\n        }\r\n        if (this._scaleBoundsMax) {\r\n            this._mesh.scaling.x = Math.min(this._mesh.scaling.x, this._scaleBoundsMax.x);\r\n            this._mesh.scaling.y = Math.min(this._mesh.scaling.y, this._scaleBoundsMax.y);\r\n            this._mesh.scaling.z = Math.min(this._mesh.scaling.z, this._scaleBoundsMax.z);\r\n        }\r\n\r\n    }\r\n\r\n    private _scaleWithSnap(mesh: TransformNode, p: Vector3) {\r\n        if (this._snapS) {\r\n            let snapit: boolean = false;\r\n            this._snapSV.addInPlace(p);\r\n            if (Math.abs(this._snapSV.x) > this._scaleSnap) {\r\n                if (p.x > 0) p.x = this._scaleSnap; else p.x = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.y) > this._scaleSnap) {\r\n                if (p.y > 0) p.y = this._scaleSnap; else p.y = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.z) > this._scaleSnap) {\r\n                if (p.z > 0) p.z = this._scaleSnap; else p.z = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (!snapit) return;\r\n            if ((Math.abs(p.x) !== this._scaleSnap) && (p.x !== 0)) p.x = 0;\r\n            if ((Math.abs(p.y) !== this._scaleSnap) && (p.y !== 0)) p.y = 0;\r\n            if ((Math.abs(p.z) !== this._scaleSnap) && (p.z !== 0)) p.z = 0;\r\n            Vector3.FromFloatsToRef(0, 0, 0, this._snapSV);\r\n            snapit = false;\r\n        }\r\n        mesh.scaling.addInPlace(p);\r\n\r\n    }\r\n\r\n    private _localX: Vector3 = new Vector3(0, 0, 0);\r\n    private _localY: Vector3 = new Vector3(0, 0, 0);\r\n    private _localZ: Vector3 = new Vector3(0, 0, 0);\r\n\r\n    /*\r\n     * This would be called after rotation or scaling as the local axes direction or length might have changed\r\n     * We need to set the local axis as these are used in all three modes to figure out \r\n     * direction of mouse move wrt the axes\r\n     * TODO should use world pivotmatrix instead of worldmatrix - incase pivot axes were rotated?\r\n     */\r\n    private _setLocalAxes(mesh: Node) {\r\n        let meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 0, this._localX);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 4, this._localY);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 8, this._localZ);\r\n    }\r\n\r\n\r\n    /*\r\n     * boundingDimesion is used by scaling to adjust rate at which a mesh is scaled\r\n     * with respect to mouse movement.\r\n     *\r\n     */\r\n    private _boundingDimesion: Vector3;\r\n    private _getBoundingDimension(mesh: TransformNode): Vector3 {\r\n        if (mesh instanceof AbstractMesh) {\r\n            { } let bb: BoundingBox = mesh.getBoundingInfo().boundingBox;\r\n            let bd: Vector3 = bb.maximum.subtract(bb.minimum);\r\n            if (bd.x == 0) bd.x = 1;\r\n            if (bd.y == 0) bd.y = 1;\r\n            if (bd.z == 0) bd.z = 1;\r\n            return bd;\r\n        } else return new Vector3(1, 1, 1);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * For the sake of speed the editcontrol calculates bounding info only once.\r\n     * This is in the constructor.\r\n     * Now The boundingbox dimension can change if the mesh is baked.\r\n     * If the editcontrol is attached to the mesh when the mesh was baked then\r\n     * the scaling speed will be incorrect.\r\n     * Thus client application should call refreshBoundingInfo if it bakes the mesh.\r\n     *\r\n     */\r\n    public refreshBoundingInfo() {\r\n        this._boundingDimesion = this._getBoundingDimension(this._mesh);\r\n    }\r\n\r\n    private _eulerian: boolean = false;\r\n    private _snapRA: number = 0;\r\n    private _doRotation(mesh: TransformNode, axis: Mesh, newPos: Vector3, prevPos: Vector3) {\r\n\r\n        //for now no rotation if parents have non uniform scale\r\n        if (this._local && (this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(mesh);\r\n        }\r\n\r\n        let angle: number = 0;\r\n\r\n        //rotation axis\r\n        let rAxis: Vector3;\r\n        if (axis == this._rX) rAxis = this._local ? this._localX : Axis.X;\r\n        else if (axis == this._rY) rAxis = this._local ? this._localY : Axis.Y;\r\n        else if (axis == this._rZ) rAxis = this._local ? this._localZ : Axis.Z;\r\n\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n\r\n        /**\r\n         * A)first find the angle and the direction (clockwise or anticlockwise) by which the user was trying to rotate\r\n         * from the user(camera) perspective\r\n         */\r\n        if (this._rotate2) {\r\n            angle = this._getAngle2(prevPos, newPos, this._mainCamera.position, this._cameraTOec, rAxis);\r\n            //TODO check why we need to handle righ hand this way\r\n            if (this._scene.useRightHandedSystem) angle = -angle;\r\n        } else {\r\n            angle = this._getAngle(prevPos, newPos, mesh.getAbsolutePivotPoint(), this._cameraTOec);\r\n        }\r\n\r\n        if (this._lhsRhs) {\r\n            angle = -angle;\r\n        }\r\n        /**\r\n         * B)then rotate based on users(camera) postion and orientation in the local/world space\r\n         * \r\n         */\r\n\r\n        if (this._snapR) {\r\n            this._snapRA += angle;\r\n            angle = 0;\r\n            if (Math.abs(this._snapRA) >= this._rotSnap) {\r\n                if (this._snapRA > 0) angle = this._rotSnap; else angle = -this._rotSnap;\r\n                this._snapRA = 0;\r\n            }\r\n        }\r\n\r\n        if (angle !== 0) {\r\n            this._cameraTOec.normalize();\r\n            if (axis == this._rAll) {\r\n                mesh.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n            } else {\r\n                if (Vector3.Dot(rAxis, this._cameraTOec) >= 0) angle = -angle;\r\n                mesh.rotate(rAxis, angle, Space.WORLD);\r\n            }\r\n\r\n            if (this._eulerian) {\r\n                mesh.rotation = mesh.rotationQuaternion.toEulerAngles();\r\n                mesh.rotationQuaternion = null;\r\n            }\r\n\r\n            if (this._local) {\r\n                if (this._lhsRhs) {\r\n                    angle = -angle;\r\n                }\r\n                if ((this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n                    if (axis == this._rAll) {\r\n                        this._ecRoot.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n                    } else {\r\n                        this._ecRoot.rotate(rAxis, angle, Space.WORLD);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPosOnPickPlane(): Vector3 {\r\n        let pickinfo: PickingInfo = this._scene.pick(this._scene.pointerX, this._scene.pointerY, (mesh) => {\r\n            return mesh == this._pickedPlane;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickinfo.hit) {\r\n            return pickinfo.pickedPoint;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _hideBaxis() {\r\n        this._bXaxis.visibility = 0;\r\n        this._bYaxis.visibility = 0;\r\n        this._bZaxis.visibility = 0;\r\n    }\r\n\r\n    //    private _setAxesVisiblity(v: number) {\r\n    //        if (this._transEnabled) {\r\n    //            this._tEndX.visibility = v;\r\n    //            this._tEndY.visibility = v;\r\n    //            this._tEndZ.visibility = v;\r\n    //            this._tEndXZ.visibility = v;\r\n    //            this._tEndZY.visibility = v;\r\n    //            this._tEndYX.visibility = v;\r\n    //            this._tEndAll.visibility = v;\r\n    //        }\r\n    //        if (this._rotEnabled) {\r\n    //            this._rEndX.visibility = v;\r\n    //            this._rEndY.visibility = v;\r\n    //            this._rEndZ.visibility = v;\r\n    //            this._rEndAll.visibility = v;\r\n    //        }\r\n    //        if (this._scaleEnabled) {\r\n    //            this._sEndX.visibility = v;\r\n    //            this._sEndY.visibility = v;\r\n    //            this._sEndZ.visibility = v;\r\n    //            this._sEndXZ.visibility = v;\r\n    //            this._sEndZY.visibility = v;\r\n    //            this._sEndYX.visibility = v;\r\n    //            this._sEndAll.visibility = v;\r\n    //        }\r\n    //    }\r\n\r\n    public getRotationQuaternion(): Quaternion {\r\n        return this._ecRoot.rotationQuaternion\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this._ecRoot.position;\r\n    }\r\n\r\n    private _transEnabled: boolean = false;\r\n\r\n    public isTranslationEnabled(): boolean {\r\n        return this._transEnabled;\r\n    }\r\n\r\n    public enableTranslation() {\r\n        if (this._hidden) return;\r\n        if (this._tX == null) {\r\n            this._createTransAxes();\r\n            this._tCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd, this._visibility);\r\n            this._transEnabled = true;\r\n            this.disableRotation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableTranslation() {\r\n        if (this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd, 0);\r\n            this._transEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _rotEnabled: boolean = false;\r\n\r\n    public isRotationEnabled(): boolean {\r\n        return this._rotEnabled;\r\n    }\r\n\r\n    public returnEuler(euler: boolean) {\r\n        this._eulerian = euler;\r\n    }\r\n\r\n    public enableRotation() {\r\n        if (this._hidden) return;\r\n        if (this._rCtl == null) {\r\n            this._createRotAxes();\r\n            this._rCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd, this._visibility);\r\n            this._rotEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableRotation() {\r\n        if (this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd, 0);\r\n            this._rotEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleEnabled: boolean = false;\r\n\r\n    public isScalingEnabled(): boolean {\r\n        return this._scaleEnabled;\r\n    }\r\n\r\n    public enableScaling() {\r\n        if (this._hidden) return;\r\n        if (this._sX == null) {\r\n            this._createScaleAxes();\r\n            this._sCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._scaleEnabled) {\r\n            this._setVisibility(this._all_sEnd, this._visibility);\r\n            this._scaleEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableRotation();\r\n        }\r\n    }\r\n\r\n    public disableScaling() {\r\n        if (this._scaleEnabled) {\r\n            this._setVisibility(this._all_sEnd, 0);\r\n            this._scaleEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleBoundsMin: Vector3;\r\n    private _scaleBoundsMax: Vector3;\r\n\r\n    public setScaleBounds(min?: Vector3, max?: Vector3) {\r\n        this._scaleBoundsMin = min ? min : null;\r\n        this._scaleBoundsMax = max ? max : null;\r\n        if (this._scaleBoundsMin != null) {\r\n            if (this._scaleBoundsMin.x == 0) this._scaleBoundsMin.x = 0.00000001;\r\n            if (this._scaleBoundsMin.y == 0) this._scaleBoundsMin.y = 0.00000001;\r\n            if (this._scaleBoundsMin.z == 0) this._scaleBoundsMin.z = 0.00000001;\r\n        }\r\n    }\r\n\r\n    public removeScaleBounds() {\r\n        this._scaleBoundsMin = null;\r\n        this._scaleBoundsMax = null;\r\n    }\r\n\r\n\r\n    private _transBoundsMin: Vector3;\r\n    private _transBoundsMax: Vector3;\r\n\r\n    public setTransBounds(min?: Vector3, max?: Vector3) {\r\n        this._transBoundsMin = min ? min : null;\r\n        this._transBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeTransBounds() {\r\n        this._transBoundsMin = null;\r\n        this._transBoundsMax = null;\r\n    }\r\n\r\n    private _rotBoundsMin: Vector3;\r\n    private _rotBoundsMax: Vector3;\r\n\r\n    public setRotBounds(min?: Vector3, max?: Vector3) {\r\n        this._rotBoundsMin = min ? min : null;\r\n        this._rotBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeRotBounds() {\r\n        this._rotBoundsMin = null;\r\n        this._rotBoundsMax = null;\r\n    }\r\n\r\n    private _bXaxis: LinesMesh;\r\n    private _bYaxis: LinesMesh;\r\n    private _bZaxis: LinesMesh;\r\n    private _xaxis: LinesMesh;\r\n    private _yaxis: LinesMesh;\r\n    private _zaxis: LinesMesh;\r\n\r\n\r\n    /*\r\n     * create big and small axeses which will be shown in translate, rotate and scale mode.\r\n     *\r\n     */\r\n    private _createCommonAxes(): Mesh {\r\n\r\n        let guideAxes: Mesh = new Mesh(\"\", this._scene);\r\n\r\n        //the big axes, shown when an axis is selected\r\n        this._bXaxis = Mesh.CreateLines(\"\", [new Vector3(-100, 0, 0), new Vector3(100, 0, 0)], this._scene);\r\n        this._bYaxis = Mesh.CreateLines(\"\", [new Vector3(0, -100, 0), new Vector3(0, 100, 0)], this._scene);\r\n        this._bZaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, -100), new Vector3(0, 0, 100)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._bXaxis.isPickable = false;\r\n        this._bYaxis.isPickable = false;\r\n        this._bZaxis.isPickable = false;\r\n\r\n        this._bXaxis.parent = guideAxes;\r\n        this._bYaxis.parent = guideAxes;\r\n        this._bZaxis.parent = guideAxes;\r\n        this._bXaxis.color = this._redCol;\r\n        this._bYaxis.color = this._greenCol\r\n        this._bZaxis.color = this._blueCol\r\n        this._hideBaxis();\r\n\r\n        //the small axis\r\n        let al: number = this._axesLen * this._axesScale * 0.75;\r\n        this._xaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(al, 0, 0)], this._scene);\r\n        this._yaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, al, 0)], this._scene);\r\n        this._zaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, 0, al)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._xaxis.isPickable = false;\r\n        this._yaxis.isPickable = false;\r\n        this._zaxis.isPickable = false;\r\n\r\n        this._xaxis.parent = guideAxes;\r\n        this._yaxis.parent = guideAxes;\r\n        this._zaxis.parent = guideAxes;\r\n        this._xaxis.color = this._redCol;\r\n        this._yaxis.color = this._greenCol;\r\n        this._zaxis.color = this._blueCol;\r\n\r\n        this._xaxis.renderingGroupId = 1;\r\n        this._yaxis.renderingGroupId = 1;\r\n        this._zaxis.renderingGroupId = 1;\r\n\r\n        return guideAxes;\r\n    }\r\n\r\n    private _pickedPlane: Mesh;\r\n    private _pALL: Mesh;\r\n    private _pXZ: Mesh;\r\n    private _pZY: Mesh;\r\n    private _pYX: Mesh;\r\n\r\n    private _createPickPlanes() {\r\n        this._pALL = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pXZ = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pZY = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pYX = Mesh.CreatePlane(\"\", 5, this._scene);\r\n\r\n        this._pALL.isPickable = false;\r\n        this._pXZ.isPickable = false;\r\n        this._pZY.isPickable = false;\r\n        this._pYX.isPickable = false;\r\n\r\n        this._pALL.visibility = 0;\r\n        this._pXZ.visibility = 0;\r\n        this._pZY.visibility = 0;\r\n        this._pYX.visibility = 0;\r\n\r\n        this._pALL.renderingGroupId = 1;\r\n        this._pXZ.renderingGroupId = 1;\r\n        this._pZY.renderingGroupId = 1;\r\n        this._pYX.renderingGroupId = 1;\r\n\r\n        this._pALL.lookAt(this._mainCamera.position);\r\n        this._pXZ.rotate(Axis.X, 1.57);\r\n        this._pZY.rotate(Axis.Y, 1.57);\r\n\r\n        let pickPlanes: Mesh = new Mesh(\"\", this._scene);\r\n        this._pALL.parent = pickPlanes;\r\n        this._pXZ.parent = pickPlanes;\r\n        this._pZY.parent = pickPlanes;\r\n        this._pYX.parent = pickPlanes;\r\n\r\n        return pickPlanes;\r\n\r\n\r\n    }\r\n\r\n    private _tCtl: Mesh;\r\n\r\n    private _tX: Mesh;\r\n    private _tY: Mesh;\r\n    private _tZ: Mesh;\r\n    private _tXZ: Mesh;\r\n    private _tZY: Mesh;\r\n    private _tYX: Mesh;\r\n    private _tAll: Mesh;\r\n    private _all_t: Mesh[];\r\n\r\n    private _tEndX: Mesh;\r\n    private _tEndY: Mesh;\r\n    private _tEndZ: Mesh;\r\n    private _tEndXZ: Mesh;\r\n    private _tEndZY: Mesh;\r\n    private _tEndYX: Mesh;\r\n    private _tEndAll: Mesh;\r\n\r\n    private _all_tEnd: Mesh[];\r\n\r\n    private _createTransAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._tCtl = new Mesh(\"\", this._scene);\r\n\r\n        /*pickable invisible boxes around axes lines*/\r\n        this._createPickableTrans(r, l, this._tCtl, this._scene);\r\n\r\n        //non pickable but visible cones at end of axes lines\r\n        this._createNonPickableTrans(r, l, this._scene);\r\n    }\r\n\r\n    private _createPickableTrans(r: number, l: number, tCtl: Mesh, scene: Scene) {\r\n        let tX = this._extrudeBox(r / 2, l);\r\n        tX.name = \"X\";\r\n        let tY = tX.clone(\"Y\");\r\n        let tZ = tX.clone(\"Z\");\r\n\r\n        let tXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, scene);\r\n        let tZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, scene);\r\n        let tYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, scene);\r\n\r\n        tXZ.rotation.x = 1.57;\r\n        tZY.rotation.y = -1.57;\r\n\r\n        tXZ.position.x = 2 * r;\r\n        tXZ.position.z = 2 * r;\r\n\r\n        tZY.position.z = 2 * r;\r\n        tZY.position.y = 2 * r;\r\n\r\n        tYX.position.y = 2 * r;\r\n        tYX.position.x = 2 * r;\r\n\r\n        tXZ.bakeCurrentTransformIntoVertices();\r\n        tZY.bakeCurrentTransformIntoVertices();\r\n        tYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let tAll = Mesh.CreateBox(\"ALL\", r * 2, scene);\r\n\r\n        tX.parent = tCtl;\r\n        tY.parent = tCtl;\r\n        tZ.parent = tCtl;\r\n        tXZ.parent = tCtl;\r\n        tZY.parent = tCtl;\r\n        tYX.parent = tCtl;\r\n        tAll.parent = tCtl;\r\n\r\n        tX.rotation.y = 1.57;\r\n        tY.rotation.x -= 1.57;\r\n\r\n        this._tX = tX;\r\n        this._tY = tY;\r\n        this._tZ = tZ;\r\n        this._tXZ = tXZ;\r\n        this._tZY = tZY;\r\n        this._tYX = tYX;\r\n        this._tAll = tAll;\r\n        this._all_t = [tX, tY, tZ, tXZ, tZY, tYX, tAll]\r\n\r\n        this._setVisibility(this._all_t, 0);\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_t)\r\n    }\r\n\r\n    private _createNonPickableTrans(r: number, l: number, scene: Scene) {\r\n        //cone length\r\n        let cl: number = l / 5;\r\n        //cone base radius\r\n        //let cr: number = r;\r\n        let tEndX = Mesh.CreateCylinder(\"\", cl, 0, r, 6, 1, scene);\r\n        let tEndY = tEndX.clone(\"\");\r\n        let tEndZ = tEndX.clone(\"\");\r\n\r\n\r\n        let s = r * 2\r\n        let tEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: s }, scene);\r\n        let tEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: s }, scene);\r\n        let tEndYX = MeshBuilder.CreatePlane(\"YX\", { size: s }, scene);\r\n\r\n        let tEndAll = Mesh.CreateBox(\"ALL\", r, scene);\r\n\r\n        tEndX.rotation.x = 1.57;\r\n        tEndY.rotation.x = 1.57;\r\n        tEndZ.rotation.x = 1.57;\r\n\r\n        tEndXZ.rotation.x = 1.57;\r\n        tEndZY.rotation.y = 1.57;\r\n        //tEndYX.rotation.x = 0;\r\n\r\n        tEndXZ.position.x = s;\r\n        tEndXZ.position.z = s;\r\n\r\n        tEndZY.position.z = s;\r\n        tEndZY.position.y = s;\r\n\r\n        tEndYX.position.y = s;\r\n        tEndYX.position.x = s;\r\n\r\n        tEndX.parent = this._tX;\r\n        tEndY.parent = this._tY;\r\n        tEndZ.parent = this._tZ;\r\n        tEndXZ.parent = this._tXZ;\r\n        tEndZY.parent = this._tZY;\r\n        tEndYX.parent = this._tYX;\r\n        tEndAll.parent = this._tAll;\r\n\r\n        tEndX.position.z = l - cl / 2;\r\n        tEndY.position.z = l - cl / 2;\r\n        tEndZ.position.z = l - cl / 2;\r\n\r\n        tEndX.material = this._redMat;\r\n        tEndY.material = this._greenMat;\r\n        tEndZ.material = this._blueMat;\r\n        tEndXZ.material = this._greenMat;\r\n        tEndZY.material = this._redMat;\r\n        tEndYX.material = this._blueMat;\r\n        tEndAll.material = this._yellowMat;\r\n\r\n        this._tEndX = tEndX;\r\n        this._tEndY = tEndY;\r\n        this._tEndZ = tEndZ;\r\n        this._tEndXZ = tEndXZ;\r\n        this._tEndZY = tEndZY;\r\n        this._tEndYX = tEndYX;\r\n        this._tEndAll = tEndAll;\r\n        this._all_tEnd = [tEndX, tEndY, tEndZ, tEndXZ, tEndZY, tEndYX, tEndAll];\r\n\r\n        this._setPickableFalse(this._all_tEnd);\r\n        this._setRenderingGroup(this._all_tEnd);\r\n    }\r\n\r\n\r\n\r\n    private _rCtl: Mesh;\r\n\r\n    private _rX: Mesh;\r\n    private _rY: Mesh;\r\n    private _rZ: Mesh;\r\n    private _rAll: Mesh;\r\n    private _all_r: Mesh[];\r\n\r\n    private _rEndX: LinesMesh;\r\n    private _rEndY: LinesMesh;\r\n    private _rEndZ: LinesMesh;\r\n    private _rEndAll: LinesMesh;\r\n    private _rEndAll2: LinesMesh;\r\n    private _all_rEnd: Mesh[];\r\n\r\n\r\n    private _guideSize: number = 180;\r\n\r\n    public setRotGuideFull(y: boolean) {\r\n        if (y) this._guideSize = 360;\r\n        else this._guideSize = 180;\r\n        if (this._rCtl != null) {\r\n            this._rCtl.dispose();\r\n            this._rAll.dispose();\r\n            this._rCtl = null;\r\n            this.enableRotation();\r\n        }\r\n    }\r\n\r\n    private _createRotAxes() {\r\n        let d: number = this._axesLen * this._axesScale * 2;\r\n        this._rCtl = new Mesh(\"\", this._scene);\r\n\r\n        //pickable invisible torus around the rotation circles\r\n        this._createPickableRot(d, this._rCtl);\r\n\r\n        /*non pickable but visible circles */\r\n        this._createNonPickableRot(d);\r\n\r\n    }\r\n\r\n    private _createPickableRot(d: number, rCtl: Mesh) {\r\n        let rX = this._createTube(d / 2, this._guideSize);\r\n        let rY = this._createTube(d / 2, this._guideSize);\r\n        let rZ = this._createTube(d / 2, this._guideSize);\r\n        let rAll = this._createTube(d / 1.75, 360);\r\n        rX.name = \"X\";\r\n        rY.name = \"Y\";\r\n        rZ.name = \"Z\";\r\n        rAll.name = \"ALL\";\r\n\r\n        rX.rotation.z = 1.57;\r\n        rZ.rotation.x = -1.57;\r\n        rX.bakeCurrentTransformIntoVertices();\r\n        rZ.bakeCurrentTransformIntoVertices();\r\n\r\n        rAll.rotation.x = 1.57;\r\n\r\n        rX.parent = rCtl;\r\n        rY.parent = rCtl;\r\n        rZ.parent = rCtl;\r\n        rAll.parent = this._pALL;\r\n\r\n        this._rX = rX;\r\n        this._rY = rY;\r\n        this._rZ = rZ;\r\n        this._rAll = rAll;\r\n        this._all_r = [rX, rY, rZ, rAll];\r\n\r\n        this._setVisibility(this._all_r, 0);\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_r);\r\n    }\r\n\r\n    private _createNonPickableRot(d: number) {\r\n\r\n        let rEndX = this._createCircle(d / 2, this._guideSize, false);\r\n        let rEndY = rEndX.clone(\"\");\r\n        let rEndZ = rEndX.clone(\"\");\r\n        let rEndAll = this._createCircle(d / 1.75, 360, false);\r\n        let rEndAll2 = this._createCircle(d / 2, 360, false);\r\n\r\n        rEndX.parent = this._rX;\r\n        rEndY.parent = this._rY;\r\n        rEndZ.parent = this._rZ;\r\n\r\n        rEndX.rotation.z = 1.57;\r\n        rEndZ.rotation.x = -1.57;\r\n\r\n        rEndAll.parent = this._rAll;\r\n        rEndAll2.parent = this._rAll;\r\n\r\n\r\n        rEndX.color = this._redCol;\r\n        rEndY.color = this._greenCol;\r\n        rEndZ.color = this._blueCol;\r\n        rEndAll.color = this._yellowCol;\r\n        rEndAll2.color = Color3.Gray();\r\n\r\n        this._rEndX = rEndX;\r\n        this._rEndY = rEndY;\r\n        this._rEndZ = rEndZ;\r\n        this._rEndAll = rEndAll;\r\n        this._rEndAll2 = rEndAll2;\r\n        this._all_rEnd = [rEndX, rEndY, rEndZ, rEndAll, rEndAll2];\r\n\r\n        this._setPickableFalse(this._all_rEnd);\r\n        this._setRenderingGroup(this._all_rEnd);\r\n    }\r\n\r\n    private _setVisibility(meshes: Mesh[], v: number) {\r\n        meshes.map((m) => m.visibility = v)\r\n    }\r\n    private _setPickableFalse(meshes: Mesh[]) {\r\n        meshes.map((m) => { m.isPickable = false })\r\n    }\r\n    private _setRenderingGroup(meshes: Mesh[]) {\r\n        meshes.map((m) => m.renderingGroupId = 2)\r\n    }\r\n\r\n    private _extrudeBox(w: number, l: number): Mesh {\r\n        let shape: Vector3[] = [new Vector3(w, w, 0), new Vector3(-w, w, 0), new Vector3(-w, -w, 0), new Vector3(w, -w, 0), new Vector3(w, w, 0)];\r\n        let path: Vector3[] = [new Vector3(0, 0, 0), new Vector3(0, 0, l)];\r\n        let box: Mesh = Mesh.ExtrudeShape(\"\", shape, path, 1, 0, 2, this._scene);\r\n        return box;\r\n    }\r\n\r\n    private _createCircle(r: number, t: number, double: boolean): LinesMesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 5) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        if (double) {\r\n            r = r - 0.04;\r\n            for (let i: number = 0; i <= t; i = i + 5) {\r\n                x = r * Math.cos(i * a);\r\n                if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n                points[p] = new Vector3(x, 0, z);\r\n                p++;\r\n            }\r\n        }\r\n        let circle: LinesMesh = Mesh.CreateLines(\"\", points, this._scene);\r\n        return circle;\r\n    }\r\n\r\n    private _createTube(r: number, t?: number): Mesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 30) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        let tube: Mesh = Mesh.CreateTube(\"\", points, this._pickWidth * this._axesScale * 2, 3, null, Mesh.NO_CAP, this._scene);\r\n        return tube;\r\n    }\r\n\r\n\r\n    private _sCtl: Mesh;\r\n\r\n    private _sX: Mesh;\r\n    private _sY: Mesh;\r\n    private _sZ: Mesh;\r\n    private _sXZ: Mesh;\r\n    private _sZY: Mesh;\r\n    private _sYX: Mesh;\r\n    private _sAll: Mesh;\r\n    private _all_s: Mesh[];\r\n\r\n    private _sEndX: Mesh;\r\n    private _sEndY: Mesh;\r\n    private _sEndZ: Mesh;\r\n    private _sEndXZ: Mesh;\r\n    private _sEndZY: Mesh;\r\n    private _sEndYX: Mesh;\r\n    private _sEndAll: Mesh;\r\n    private _all_sEnd: Mesh[];\r\n\r\n\r\n    private _createScaleAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._sCtl = new Mesh(\"\", this._scene);\r\n\r\n        /* pickable , invisible part */\r\n        this._createPickableScale(r, l, this._sCtl);\r\n\r\n        /* non pickable visible boxes at end of axes */\r\n        this._createNonPickableScale(r, l);\r\n\r\n\r\n    }\r\n\r\n    private _createPickableScale(r: number, l: number, sCtl: Mesh) {\r\n        let sX: Mesh = this._extrudeBox(r / 2, l);\r\n        sX.name = \"X\";\r\n        let sY: Mesh = sX.clone(\"Y\");\r\n        let sZ: Mesh = sX.clone(\"Z\");\r\n\r\n        let sXZ: Mesh = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        let sZY: Mesh = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        let sYX: Mesh = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n\r\n\r\n        sXZ.rotation.x = 1.57;\r\n        sZY.rotation.y = -1.57;\r\n\r\n        sXZ.position.x = 2 * r;\r\n        sXZ.position.z = 2 * r;\r\n\r\n        sZY.position.z = 2 * r;\r\n        sZY.position.y = 2 * r;\r\n\r\n        sYX.position.y = 2 * r;\r\n        sYX.position.x = 2 * r;\r\n\r\n        sXZ.bakeCurrentTransformIntoVertices();\r\n        sZY.bakeCurrentTransformIntoVertices();\r\n        sYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let sAll: Mesh = Mesh.CreateBox(\"ALL\", 2 * r, this._scene);\r\n\r\n        sX.parent = sCtl;\r\n        sY.parent = sCtl;\r\n        sZ.parent = sCtl;\r\n        sAll.parent = sCtl;\r\n        sXZ.parent = sCtl;\r\n        sZY.parent = sCtl;\r\n        sYX.parent = sCtl;\r\n\r\n        sX.rotation.y = 1.57;\r\n        sY.rotation.x -= 1.57;\r\n\r\n        this._sX = sX;\r\n        this._sY = sY;\r\n        this._sZ = sZ;\r\n        this._sXZ = sXZ;\r\n        this._sZY = sZY;\r\n        this._sYX = sYX;\r\n        this._sAll = sAll;\r\n        this._all_s = [sX, sY, sZ, sXZ, sZY, sYX, sAll];\r\n\r\n        this._setVisibility(this._all_s, 0);\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_s);\r\n    }\r\n\r\n    private _createNonPickableScale(r: number, l: number) {\r\n\r\n        let sEndX = Mesh.CreateBox(\"\", r, this._scene);\r\n        let sEndY = sEndX.clone(\"\");\r\n        let sEndZ = sEndX.clone(\"\");\r\n\r\n        let s = r * 2;\r\n        let sEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: s }, this._scene);\r\n        let sEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: s }, this._scene);\r\n        let sEndYX = MeshBuilder.CreatePlane(\"YX\", { size: s }, this._scene);\r\n\r\n\r\n        let sEndAll = Mesh.CreateBox(\"ALL\", r, this._scene);\r\n\r\n        sEndXZ.rotation.x = 1.57;\r\n        sEndZY.rotation.y = -1.57;\r\n\r\n        sEndXZ.position.x = s;\r\n        sEndXZ.position.z = s;\r\n\r\n        sEndZY.position.z = s;\r\n        sEndZY.position.y = s;\r\n\r\n        sEndYX.position.y = s;\r\n        sEndYX.position.x = s;\r\n\r\n        sEndX.parent = this._sX;\r\n        sEndY.parent = this._sY;\r\n        sEndZ.parent = this._sZ;\r\n        sEndXZ.parent = this._sXZ;\r\n        sEndZY.parent = this._sZY;\r\n        sEndYX.parent = this._sYX;\r\n        sEndAll.parent = this._sAll;\r\n\r\n        sEndX.position.z = l - r / 2;\r\n        sEndY.position.z = l - r / 2;\r\n        sEndZ.position.z = l - r / 2;\r\n\r\n        sEndX.material = this._redMat;\r\n        sEndY.material = this._greenMat;\r\n        sEndZ.material = this._blueMat;\r\n        sEndXZ.material = this._greenMat;\r\n        sEndZY.material = this._redMat;\r\n        sEndYX.material = this._blueMat;\r\n        sEndAll.material = this._yellowMat;\r\n\r\n        this._sEndX = sEndX;\r\n        this._sEndY = sEndY;\r\n        this._sEndZ = sEndZ;\r\n        this._sEndXZ = sEndXZ;\r\n        this._sEndZY = sEndZY;\r\n        this._sEndYX = sEndYX;\r\n        this._sEndAll = sEndAll;\r\n        this._all_sEnd = [sEndX, sEndY, sEndZ, sEndXZ, sEndZY, sEndYX, sEndAll];\r\n\r\n        this._setPickableFalse(this._all_sEnd);\r\n        this._setRenderingGroup(this._all_sEnd);\r\n    }\r\n\r\n\r\n    /**\r\n     * checks if a have left hand , right hand issue.\r\n     * In other words if a mesh is a LHS mesh in RHS system or \r\n     * a RHS mesh in LHS system\r\n     * The X axis will be reversed in such cases.\r\n     * thus Cross product of X and Y should be inverse of Z.\r\n     * \r\n     */\r\n    //    private _check_LHS_RHS(mesh: Mesh) {\r\n    //        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n    //        //same direction or opposite direction of Z\r\n    //        if (Vector3.Dot(actualZ, this._localZ) < 0) return true;\r\n    //        else return false;\r\n    //    }\r\n\r\n    /**\r\n     * set how transparent the axes are\r\n     * 0 to 1\r\n     * 0 - completely transparent\r\n     * 1 - completely non transparent\r\n     * default is 0.75\r\n     */\r\n    public setVisibility(v: number) {\r\n        this._visibility = v;\r\n    }\r\n    public setLocal(l: boolean) {\r\n        if (this._local == l) return;\r\n        this._local = l;\r\n        if (!l) {\r\n            this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n    }\r\n\r\n    public isLocal(): boolean {\r\n        return this._local;\r\n    }\r\n\r\n    public setTransSnap(s: boolean) {\r\n        this._snapT = s;\r\n    }\r\n\r\n    public setRotSnap(s: boolean) {\r\n        this._snapR = s;\r\n    }\r\n\r\n    public setScaleSnap(s: boolean) {\r\n        this._snapS = s;\r\n    }\r\n\r\n    private _tSnap: Vector3 = new Vector3(this._transSnap, this._transSnap, this._transSnap);\r\n    public setTransSnapValue(t: number) {\r\n        this._tSnap.copyFromFloats(t, t, t);\r\n        this._transSnap = t;\r\n    }\r\n\r\n    public setRotSnapValue(r: number) {\r\n        this._rotSnap = r;\r\n    }\r\n\r\n    /**\r\n     * use this to set the scale snap value\r\n     */\r\n    public setScaleSnapValue(r: number) {\r\n        this._scaleSnap = r;\r\n    }\r\n\r\n    //few temp vectors & matrix\r\n    private _tv1: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv2: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv3: Vector3 = new Vector3(0, 0, 0);\r\n    private _tm: Matrix = new Matrix();\r\n    private _getAngle2(p1: Vector3, p2: Vector3, cameraPos: Vector3, c2ec: Vector3, mN: Vector3): number {\r\n        /**\r\n         * A) find out if the camera is above , below, left, right of the rotation plane\r\n         */\r\n        //project \"camera to ec\" vector onto mesh normal to get distance to rotation plane\r\n        let d: number = Vector3.Dot(c2ec, mN);\r\n        //scale mesh normal by above ammount to get vector to rotation plane\r\n        mN.scaleToRef(d, this._tv1);\r\n        //get the point of intersection of vector from camera perpendicular to rotation plane\r\n        cameraPos.addToRef(this._tv1, this._tv2);\r\n        let i: Vector3 = this._tv2;//save some typing\r\n        //find the co-ordinate of this point in the cameras frame of reference\r\n        this._mainCamera.getWorldMatrix().invertToRef(this._tm);\r\n        Vector3.TransformCoordinatesToRef(this._tv2, this._tm, this._tv2);\r\n        //find in which quadarant the point (and thus the rotation plane) is in the camera xy plane\r\n        let q: number = 0; //(1=x y,2=-x y,3=-x -y,4=x -y)\r\n        if (i.x >= 0 && i.y >= 0) q = 1;\r\n        else if (i.x <= 0 && i.y >= 0) q = 2;\r\n        else if (i.x <= 0 && i.y <= 0) q = 3;\r\n        else if (i.x >= 0 && i.y <= 0) q = 4;\r\n\r\n        /**\r\n         * B) find out if the user moved pointer up,down, right, left\r\n         */\r\n\r\n        //find movement vector in camera frame of reference\r\n        Vector3.TransformCoordinatesToRef(p1, this._tm, this._tv1);\r\n        Vector3.TransformCoordinatesToRef(p2, this._tm, this._tv2);\r\n        this._tv2.subtractInPlace(this._tv1);\r\n        let mv: Vector3 = this._tv2; //save some typing\r\n        //for now lets set the angle magnitutde same as amount by which the mouse moved\r\n        let angle: number = mv.length();\r\n\r\n        let m: String = \"\";//(u ,d ,r,l)\r\n        if (mv.x >= 0 && mv.y >= 0) {\r\n            if (mv.x >= mv.y) m = \"r\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y >= 0) {\r\n            if (-mv.x >= mv.y) m = \"l\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y <= 0) {\r\n            if (-mv.x >= -mv.y) m = \"l\"; else m = \"d\";\r\n        } else if (mv.x >= 0 && mv.y <= 0) {\r\n            if (mv.x >= -mv.y) m = \"r\"; else m = \"d\";\r\n        }\r\n\r\n        /**\r\n         * C) decide if the user was trying to rotate clockwise (+1) or anti-clockwise(-1)\r\n         */\r\n\r\n        let r: number = 0;\r\n        //if mouse moved down /up and rotation plane is on  right or left side of user\r\n        if (m == \"d\") {\r\n            if (q == 1 || q == 4) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"u\") {\r\n            if (q == 1 || q == 4) r = -1;\r\n            else r = 1;\r\n            //if mouse moved right/left and  rotation plane is above or below user\r\n        } else if (m == \"r\") {\r\n            if (q == 2 || q == 1) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"l\") {\r\n            if (q == 2 || q == 1) r = -1;\r\n            else r = 1;\r\n        }\r\n\r\n        return r * angle;\r\n    }\r\n\r\n    /**\r\n     * finds the angle subtended from points p1 to p2 around the point p\r\n     * checks if the user was trying to rotate clockwise (+ve in LHS) or anticlockwise (-ve in LHS)\r\n     * to figure this check the orientation of the user(camera)to ec vector with the rotation normal vector\r\n     */\r\n    private _getAngle(p1: Vector3, p2: Vector3, p: Vector3, c2ec: Vector3): number {\r\n        p1.subtractToRef(p, this._tv1);\r\n        p2.subtractToRef(p, this._tv2);\r\n        Vector3.CrossToRef(this._tv1, this._tv2, this._tv3);\r\n        let angle: number = Math.asin(this._tv3.length() / (this._tv1.length() * this._tv2.length()));\r\n        //camera looking down from front of plane or looking up from behind plane\r\n        if ((Vector3.Dot(this._tv3, c2ec) > 0)) {\r\n            angle = -1 * angle;\r\n        }\r\n        return angle;\r\n    }\r\n    \r\n    private static _getStandardMaterial(col: Color3, scene: Scene): StandardMaterial {\r\n        let mat: StandardMaterial = new StandardMaterial(\"\", scene);\r\n        mat.emissiveColor = col;\r\n        mat.diffuseColor = Color3.Black();\r\n        mat.specularColor = Color3.Black();\r\n        mat.backFaceCulling = false;\r\n        return mat;\r\n    }\r\n\r\n    private _createMaterials(scene: Scene) {\r\n        this._redMat = EditControl._getStandardMaterial(this._redCol, scene);\r\n        this._greenMat = EditControl._getStandardMaterial(this._greenCol, scene);\r\n        this._blueMat = EditControl._getStandardMaterial(this._blueCol, scene);\r\n        this._whiteMat = EditControl._getStandardMaterial(this._whiteCol, scene);\r\n        this._yellowMat = EditControl._getStandardMaterial(this._yellowCol, scene);\r\n    }\r\n\r\n    private _disposeMaterials() {\r\n        this._redMat.dispose();\r\n        this._greenMat.dispose();\r\n        this._blueMat.dispose();\r\n        this._whiteMat.dispose();\r\n        this._yellowMat.dispose();\r\n    }\r\n\r\n    \r\n}\r\n\r\nclass ActHist {\r\n    private mesh: TransformNode;\r\n\r\n    private lastMax: number = 10;\r\n\r\n    private acts: Array<Act> = new Array<Act>();\r\n\r\n    private last: number = -1;\r\n\r\n    private current: number = -1;\r\n\r\n    public constructor(mesh: TransformNode, capacity: number) {\r\n        this.mesh = mesh;\r\n        this.lastMax = capacity - 1;\r\n        this.add();\r\n    }\r\n\r\n    public setCapacity(c: number) {\r\n        if ((c == 0)) {\r\n            console.error(\"capacity should be more than zero\");\r\n            return;\r\n        }\r\n        this.lastMax = c - 1;\r\n        this.last = -1;\r\n        this.current = -1;\r\n        this.acts = new Array<Act>();\r\n        this.add();\r\n    }\r\n\r\n    public add(at?: number) {\r\n        if (at === undefined) at = null;\r\n        let act: Act = new Act(this.mesh, at);\r\n        if ((this.current < this.last)) {\r\n            this.acts.splice(this.current + 1);\r\n            this.last = this.current;\r\n        }\r\n        if ((this.last == this.lastMax)) {\r\n            this.acts.shift();\r\n            this.acts.push(act);\r\n        } else {\r\n            this.acts.push(act);\r\n            this.last++;\r\n            this.current++;\r\n        }\r\n    }\r\n\r\n    public undo(): number {\r\n        if ((this.current > 0)) {\r\n            let at: number = (<Act>this.acts[this.current]).getActionType()\r\n            this.current--;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return at;\r\n        }\r\n    }\r\n\r\n    public redo() {\r\n        if ((this.current < this.last)) {\r\n            this.current++;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return (<Act>this.acts[this.current]).getActionType()\r\n        }\r\n    }\r\n}\r\n\r\nclass Act {\r\n    private _p: Vector3;\r\n\r\n    private _rQ: Quaternion;\r\n    private _rE: Vector3;\r\n\r\n    private _s: Vector3;\r\n\r\n    //actiontype\r\n    private _at: number;\r\n\r\n    public constructor(mesh: TransformNode, at: number) {\r\n        this._p = mesh.position.clone();\r\n        //if (mesh.rotationQuaternion == null) {\r\n        if (mesh.rotationQuaternion == null) {\r\n            this._rQ = null;\r\n            this._rE = mesh.rotation.clone();\r\n        } else {\r\n            this._rQ = mesh.rotationQuaternion.clone();\r\n            this._rE = null;\r\n        }\r\n        this._s = mesh.scaling.clone();\r\n        this._at = at;\r\n    }\r\n\r\n    public getActionType(): number {\r\n        return this._at;\r\n    }\r\n\r\n    public perform(mesh: TransformNode) {\r\n        mesh.position.copyFrom(this._p)\r\n        //check if we are doing euler or quaternion now\r\n        //also check what were we doing when the rotation value\r\n        //was captured and set value accordingly\r\n        if (mesh.rotationQuaternion == null) {\r\n            if (this._rE != null) {\r\n                //mesh.rotation = this.rE.clone();\r\n                mesh.rotation.copyFrom(this._rE);\r\n            } else {\r\n                //mesh.rotation = this.r.toEulerAngles();\r\n                mesh.rotation.copyFrom(this._rQ.toEulerAngles());\r\n            }\r\n        } else {\r\n            if (this._rQ != null) {\r\n                mesh.rotationQuaternion.copyFrom(this._rQ);\r\n            } else {\r\n                //TODO use BABYLON.Quaternion.RotationYawPitchRoll(rot.y, rot.x, rot.z) instead of toQuaternion.\r\n                //mesh.rotationQuaternion.copyFrom(this.rE.toQuaternion());\r\n                mesh.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(this._rE.y, this._rE.x, this._rE.z));\r\n            }\r\n        }\r\n        mesh.scaling.copyFrom(this._s);\r\n    }\r\n}\r\n"],"sourceRoot":""}