{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack:///./src/EditControl.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ActionType","mesh","camera","canvas","scale","eulerian","pickWidth","_local","_snapT","_snapR","_transSnap","_rotSnap","Math","PI","_axesLen","_axesScale","_pickWidth","_redCol","_greenCol","_blueCol","_whiteCol","_yellowCol","_visibility","_lhsRhs","_ecMatrix","_ecTOcamera","_distFromCamera","_cameraTOec","_cameraNormal","_prevState","_hidden","_actionListener","_actionStartListener","_actionEndListener","_pDown","_pointerIsOver","_editing","_rotate2","_transBy","_snapTV","_snapS","_snapSV","_scaleSnap","_scale","_localX","_localY","_localZ","_eulerian","_snapRA","_transEnabled","_rotEnabled","_scaleEnabled","_guideSize","_tSnap","this","_tv1","_tv2","_tv3","_tm","_mesh","_mainCamera","_canvas","_checkQuaternion","_scene","getScene","_actHist","ActHist","computeWorldMatrix","_boundingDimesion","_getBoundingDimension","_setLocalAxes","_check_LHS_RHS","console","log","_ecRoot","rotationQuaternion","Identity","visibility","isPickable","_createMaterials","_createCommonAxes","parent","_createPickPlanes","_pointerdown","evt","_onPointerDown","_pointerup","_onPointerUp","_pointermove","_onPointerMove","addEventListener","_renderer","_renderLoopProcess","registerBeforeRender","getRoot","undefined","_issue","actualZ","Cross","Dot","position","getAbsolutePivotPoint","_setECRotation","_setECScale","getWorldMatrix","invertToRef","TransformCoordinatesToRef","_pALL","lookAt","LOCAL","subtractToRef","WORLD","_rotRotGuides","_rotPlanarGuides","_tXZ","_tZY","_tYX","_sXZ","_sZY","_sYX","rot","rotation","RotationYawPitchRollToRef","y","x","z","copyFrom","_isScaleUnEqual","getRotationMatrixToRef","FromRotationMatrixToRef","scaling","FromFloatArrayToRef","asArray","parentOnNormal","length","abs","FromFloatsToRef","rotX","atan","_rX","rotY","_rY","rotZ","_rZ","XZ","ZY","YX","ec","switchTo","refreshBoundingInfo","switchCamera","setUndoCount","setCapacity","undo","at","_callActionStartListener","_callActionListener","_callActionEndListener","redo","detach","removeEventListener","unregisterBeforeRender","removeAllActionListeners","_disposeAll","hide","disableTranslation","disableRotation","disableScaling","_hideCommonAxes","_xaxis","_yaxis","_zaxis","_showCommonAxes","show","enableTranslation","enableRotation","enableScaling","isHidden","dispose","_disposeMaterials","addActionListener","actionListener","removeActionListener","addActionStartListener","actionStartListener","removeActionStartListener","addActionEndListener","actionEndListener","removeActionEndListener","preventDefault","button","engine","getEngine","width","pointerX","height","pointerY","pickResult","pick","_tX","_tY","_tZ","_tAll","_rAll","_sX","_sY","_sZ","_sAll","hit","_axisPicked","pickedMesh","childs","getChildren","_bXaxis","_bYaxis","_bZaxis","_setEditing","_pickedPlane","_getPickPlane","_prevPos","_getPosOnPickPlane","setTimeout","cam","can","_detachCamera","editing","_setActionType","_actionType","ROT","isEditing","isPointerLock","detachControl","isPointerOver","_onPointerOver","_prevOverMesh","_clearPrevOverMesh","_savedCol","color","_savedMat","material","_whiteMat","_restoreColor","attachControl","_hideBaxis","add","TRANS","SCALE","newPos","_doRotation","diff","subtract","_doTranslation","_doScaling","axis","_pXZ","_pZY","_pYX","_transWithSnap","_transBoundsMin","max","_transBoundsMax","min","trans","local","snapit","addInPlace","normalizeToRef","translate","setAbsolutePosition","absolutePosition","bbd","upVector","copyFromFloats","inPlane","_scaleWithSnap","_scaleBoundsMin","_scaleBoundsMax","meshMatrix","bb","getBoundingInfo","boundingBox","bd","maximum","minimum","prevPos","rAxis","angle","X","Y","Z","_getAngle2","useRightHandedSystem","_getAngle","normalize","rotate","toEulerAngles","pickinfo","pickedPoint","getRotationQuaternion","getPosition","isTranslationEnabled","_createTransAxes","_tCtl","_setVisibility","_all_tEnd","isRotationEnabled","returnEuler","euler","_rCtl","_createRotAxes","_all_rEnd","isScalingEnabled","_createScaleAxes","_sCtl","_all_sEnd","setScaleBounds","removeScaleBounds","setTransBounds","removeTransBounds","setRotBounds","_rotBoundsMin","_rotBoundsMax","removeRotBounds","guideAxes","CreateLines","al","renderingGroupId","CreatePlane","pickPlanes","_createPickableTrans","_createNonPickableTrans","tCtl","scene","tX","_extrudeBox","tY","clone","tZ","tXZ","size","tZY","tYX","bakeCurrentTransformIntoVertices","tAll","CreateBox","_all_t","_setPickableFalse","cl","tEndX","CreateCylinder","tEndY","tEndZ","tEndXZ","tEndZY","tEndYX","tEndAll","_redMat","_greenMat","_blueMat","_yellowMat","_tEndX","_tEndY","_tEndZ","_tEndXZ","_tEndZY","_tEndYX","_tEndAll","_setRenderingGroup","setRotGuideFull","_createPickableRot","_createNonPickableRot","rCtl","rX","_createTube","rY","rZ","rAll","_all_r","rEndX","_createCircle","rEndY","rEndZ","rEndAll","rEndAll2","Gray","_rEndX","_rEndY","_rEndZ","_rEndAll","_rEndAll2","meshes","v","map","w","shape","path","ExtrudeShape","double","points","cos","sin","CreateTube","NO_CAP","_createPickableScale","_createNonPickableScale","sCtl","sX","sY","sZ","sXZ","sZY","sYX","sAll","_all_s","sEndX","sEndY","sEndZ","sEndXZ","sEndZY","sEndYX","sEndAll","_sEndX","_sEndY","_sEndZ","_sEndXZ","_sEndZY","_sEndYX","_sEndAll","setVisibility","setLocal","isLocal","setTransSnap","isTransSnap","setRotSnap","isRotSnap","setScaleSnap","isScaleSnap","setTransSnapValue","getTransSnapValue","setRotSnapValue","getRotSnapValue","setScaleSnapValue","getScaleSnapValue","p1","p2","cameraPos","c2ec","mN","scaleToRef","addToRef","q","subtractInPlace","mv","CrossToRef","asin","_getStandardMaterial","col","mat","emissiveColor","diffuseColor","Black","specularColor","backFaceCulling","EditControl","capacity","lastMax","acts","Array","last","current","error","act","Act","splice","shift","push","getActionType","perform","_p","_rQ","_rE","_s","_at","RotationYawPitchRoll"],"mappings":"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","file":"EditControl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\r\nimport {\r\n    AbstractMesh,\r\n    Axis,\r\n    BoundingBox,\r\n    Camera,\r\n    Color3,\r\n    LinesMesh,\r\n    Material,\r\n    Matrix,\r\n    Mesh,\r\n    MeshBuilder,\r\n    Node,\r\n    PickingInfo,\r\n    Quaternion,\r\n    Scene,\r\n    Space,\r\n    StandardMaterial,\r\n    Vector3,\r\n    TransformNode,\r\n    Engine\r\n}\r\n    from 'babylonjs';\r\n\r\n\r\n\r\nenum ActionType {\r\n    TRANS = 0,\r\n    ROT = 1,\r\n    SCALE = 2\r\n}\r\n\r\n/**\r\n * Draws a transform widget at the mesh's location (its pivot location).\r\n * The widget transforms(translates,rotates and scales) the mesh based on user\r\n * interactions with the widget.\r\n * The widget shows the mesh position and rotation at any time. \r\n * The widget follows the mesh constantly. \r\n * Note: An alternate approach would have been for the mesh to follow the widget.\r\n * The problem with the alternate approach - syncing the transforms\r\n * if the mesh was being transformed by entities other than the widget say physics \r\n * or script for example.\r\n * \r\n */\r\n\r\nexport class EditControl {\r\n    private _mesh: TransformNode;\r\n\r\n\r\n    private _canvas: HTMLCanvasElement;\r\n    private _scene: Scene;\r\n    private _mainCamera: Camera;\r\n    //root of the edit control\r\n    private _ecRoot: Mesh;\r\n    private _local: boolean = true;\r\n    private _snapT: boolean = false;\r\n    private _snapR: boolean = false;\r\n    private _transSnap: number = 1;\r\n    private _rotSnap: number = Math.PI / 18;\r\n    private _axesLen: number = 0.4;\r\n    private _axesScale: number = 1;\r\n    //how close to an axis should we get before we can pick it \r\n    private _pickWidth: number = 0.02;\r\n    private _redMat: StandardMaterial;\r\n    private _greenMat: StandardMaterial;\r\n    private _blueMat: StandardMaterial;\r\n    private _whiteMat: StandardMaterial;\r\n    private _yellowMat: StandardMaterial;\r\n    private _redCol: Color3 = new Color3(1, 0.2, 0.2);\r\n    private _greenCol: Color3 = new Color3(0.2, 1, 0.2);\r\n    private _blueCol: Color3 = new Color3(0.2, 0.2, 1);\r\n    private _whiteCol: Color3 = new Color3(1, 1, 1);\r\n    private _yellowCol: Color3 = new Color3(1, 1, 0.2);\r\n\r\n    private _actHist: ActHist;\r\n    private _renderer: () => void;\r\n    private _pointerdown: EventListener;\r\n    private _pointerup: EventListener;\r\n    private _pointermove: EventListener;\r\n    //axes visibility\r\n    private _visibility: number = 0.75;\r\n\r\n    //lhs-rhs issue. lhs mesh in rhs or rhs mesh in lhs\r\n    private _lhsRhs: boolean = false;\r\n\r\n    public constructor(mesh: TransformNode, camera: Camera, canvas: HTMLCanvasElement, scale?: number, eulerian?: boolean, pickWidth?: number) {\r\n\r\n        this._mesh = mesh;\r\n        this._mainCamera = camera;\r\n        this._canvas = canvas;\r\n\r\n        if (scale != null) {\r\n            this._axesScale = scale;\r\n        }\r\n\r\n        if (eulerian !== null) {\r\n            this._eulerian = eulerian;\r\n        } else {\r\n            this._eulerian = false;\r\n        }\r\n        this._checkQuaternion();\r\n\r\n        if (pickWidth != null) {\r\n            this._pickWidth = pickWidth;\r\n        }\r\n\r\n        this._scene = mesh.getScene();\r\n        this._actHist = new ActHist(mesh, 10);\r\n\r\n        mesh.computeWorldMatrix(true);\r\n        this._boundingDimesion = this._getBoundingDimension(mesh);\r\n        this._setLocalAxes(mesh);\r\n        this._lhsRhs = this._check_LHS_RHS(mesh);\r\n        console.log(\"lhs rhs issue \" + this._lhsRhs);\r\n\r\n        //build the edit control axes\r\n        this._ecRoot = new Mesh(\"\", this._scene);\r\n        this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        this._ecRoot.visibility = 0;\r\n        this._ecRoot.isPickable = false;\r\n\r\n        this._createMaterials(this._scene);\r\n\r\n        let guideAxes: Mesh = this._createCommonAxes();\r\n        guideAxes.parent = this._ecRoot;\r\n\r\n        //build the pickplanes\r\n        let pickPlanes: Mesh = this._createPickPlanes();\r\n        pickPlanes.parent = this._ecRoot;\r\n\r\n        this._pointerdown = (evt) => { return this._onPointerDown(evt) };\r\n        this._pointerup = (evt) => { return this._onPointerUp(evt) };\r\n        this._pointermove = (evt) => { return this._onPointerMove(evt) };\r\n\r\n        //use canvas rather than scene to handle pointer events\r\n        //scene cannot have mutiple eventlisteners for an event\r\n        //with canvas one will have to do ones own pickinfo generation.\r\n\r\n        canvas.addEventListener(\"pointerdown\", this._pointerdown, false);\r\n        canvas.addEventListener(\"pointerup\", this._pointerup, false);\r\n        canvas.addEventListener(\"pointermove\", this._pointermove, false);\r\n\r\n\r\n        this._renderer = () => { return this._renderLoopProcess() };\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public getRoot(): AbstractMesh {\r\n        return this._ecRoot;\r\n    }\r\n\r\n    //make sure that if eulerian is set to false then mesh's rotation is in quaternion\r\n    //throw error and exit if not so.\r\n    private _checkQuaternion() {\r\n        if (!this._eulerian) {\r\n            if ((this._mesh.rotationQuaternion == null) || (this._mesh.rotationQuaternion == undefined)) {\r\n                throw \"Error: Eulerian is set to false but the mesh's rotationQuaternion is not set.\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * \r\n        * if no parent then we are ok.\r\n        * If parent and parent has issue then we have issue.\r\n        * \r\n        */\r\n    private _check_LHS_RHS(mesh: TransformNode) {\r\n        let _issue: boolean = false;\r\n        let root: Node = mesh.parent;\r\n        if (root == null) return false;\r\n        this._setLocalAxes(root);\r\n        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, this._localZ) < 0) _issue = true;\r\n        else _issue = false;\r\n        this._setLocalAxes(mesh);\r\n        return _issue;\r\n    }\r\n\r\n    private _ecMatrix: Matrix = new Matrix();\r\n    //edit control to camera vector\r\n    private _ecTOcamera: Vector3 = new Vector3(0, 0, 0);\r\n    private _renderLoopProcess() {\r\n\r\n        //sync the edit control position and rotation with that of mesh\r\n        this._ecRoot.position = this._mesh.getAbsolutePivotPoint();\r\n        this._setECRotation();\r\n\r\n        //scale the EditControl so it seems at the same distance from camera/user\r\n        this._setECScale();\r\n\r\n        //rotate the free move,rotate,scale pick plane to face the camera/user\r\n        if (this._local) {\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            //note pALL is child of ecRoot hence lookAt in local space\r\n            this._pALL.lookAt(this._ecTOcamera, 0, 0, 0, Space.LOCAL);\r\n        } else {\r\n            this._mainCamera.position.subtractToRef(this._ecRoot.position, this._ecTOcamera);\r\n            this._pALL.lookAt(this._mainCamera.position, 0, 0, 0, Space.WORLD);\r\n        }\r\n\r\n        //rotate the rotation and planar guide to face the camera/user\r\n        if (this._rotEnabled) {\r\n            this._rotRotGuides();\r\n        }\r\n        else if (this._transEnabled) this._rotPlanarGuides(this._tXZ, this._tZY, this._tYX);\r\n        else if (this._scaleEnabled) this._rotPlanarGuides(this._sXZ, this._sZY, this._sYX);\r\n\r\n        //check pointer over axes only during pointer moves\r\n        //this.onPointerOver();\r\n    }\r\n\r\n    /**\r\n     * sets rotaion of edit control to that of the mesh\r\n     */\r\n    private _setECRotation() {\r\n        if (this._local) {\r\n            if (this._mesh.parent == null) {\r\n                if (this._eulerian) {\r\n                    let rot: Vector3 = this._mesh.rotation;\r\n                    Quaternion.RotationYawPitchRollToRef(rot.y, rot.x, rot.z, this._ecRoot.rotationQuaternion);\r\n                } else {\r\n                    this._ecRoot.rotationQuaternion.copyFrom(this._mesh.rotationQuaternion);\r\n                }\r\n            } else {\r\n\r\n                if (this._isScaleUnEqual(this._mesh)) return;\r\n\r\n                this._mesh.getWorldMatrix().getRotationMatrixToRef(this._tm);\r\n                Quaternion.FromRotationMatrixToRef(this._tm, this._ecRoot.rotationQuaternion);\r\n                //this._ecRoot.rotationQuaternion.normalize();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * checks if any of the mesh's ancestors has non uniform scale\r\n     */\r\n    private _isScaleUnEqual(mesh: TransformNode): boolean {\r\n        if (mesh.parent == null) return false;\r\n        while (mesh.parent != null) {\r\n            if (((<Mesh>mesh.parent).scaling.x != (<Mesh>mesh.parent).scaling.y ||\r\n                (<Mesh>mesh.parent).scaling.y != (<Mesh>mesh.parent).scaling.z)) {\r\n                return true;\r\n            } else {\r\n                mesh = <Mesh>mesh.parent;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //how far away from camera should the edit control appear to be\r\n    private _distFromCamera: number = 2;\r\n    //vector from camera to edit control\r\n    private _cameraTOec: Vector3 = new Vector3(0, 0, 0);\r\n    private _cameraNormal: Vector3 = new Vector3(0, 0, 0);\r\n    private _setECScale() {\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n        Vector3.FromFloatArrayToRef(this._mainCamera.getWorldMatrix().asArray(), 8, this._cameraNormal);\r\n\r\n        //get distance of edit control from the camera plane \r\n        //project \"camera to edit control\" vector onto the camera normal\r\n        let parentOnNormal: number = Vector3.Dot(this._cameraTOec, this._cameraNormal) / this._cameraNormal.length();\r\n\r\n        let s: number = Math.abs(parentOnNormal / this._distFromCamera);\r\n        Vector3.FromFloatsToRef(s, s, s, this._ecRoot.scaling);\r\n        //Vector3.FromFloatsToRef(s,s,s,this.pALL.scaling);\r\n    }\r\n\r\n\r\n    //rotate the rotation guides so that they are facing the camera\r\n    private _rotRotGuides() {\r\n        let rotX = Math.atan(this._ecTOcamera.y / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rX.rotation.x = -rotX;\r\n        } else {\r\n            this._rX.rotation.x = -rotX - Math.PI;\r\n        }\r\n\r\n        let rotY = Math.atan(this._ecTOcamera.x / this._ecTOcamera.z);\r\n        if (this._ecTOcamera.z >= 0) {\r\n            this._rY.rotation.y = rotY;\r\n        } else {\r\n            this._rY.rotation.y = rotY + Math.PI;\r\n        }\r\n\r\n        let rotZ = Math.atan(this._ecTOcamera.x / this._ecTOcamera.y);\r\n        if (this._ecTOcamera.y >= 0) {\r\n            this._rZ.rotation.z = -rotZ;\r\n        } else {\r\n            this._rZ.rotation.z = -rotZ - Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotate the planar guide so that they are facing the camera\r\n     */\r\n    private _rotPlanarGuides(XZ: Mesh, ZY: Mesh, YX: Mesh) {\r\n        let ec: Vector3 = this._ecTOcamera;\r\n\r\n        XZ.rotation.x = 0;\r\n        XZ.rotation.y = 0;\r\n        XZ.rotation.z = 0;\r\n\r\n        ZY.rotation.x = 0;\r\n        ZY.rotation.y = 0;\r\n        ZY.rotation.z = 0;\r\n\r\n        YX.rotation.x = 0;\r\n        YX.rotation.y = 0;\r\n        YX.rotation.z = 0;\r\n\r\n        if (ec.x <= 0 && ec.y >= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x <= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n            YX.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y >= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.y = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z >= 0) {\r\n            XZ.rotation.z = 3.14;\r\n            ZY.rotation.z = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x <= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.y = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.z = 3.14;\r\n        } else if (ec.x >= 0 && ec.y <= 0 && ec.z <= 0) {\r\n            XZ.rotation.x = 3.14;\r\n            ZY.rotation.x = 3.14;\r\n            YX.rotation.x = 3.14;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public switchTo(mesh: TransformNode, eulerian?: boolean) {\r\n        mesh.computeWorldMatrix(true);\r\n        this._mesh = mesh;\r\n        if (eulerian != null) {\r\n            this._eulerian = eulerian;\r\n        }\r\n        this._checkQuaternion();\r\n        this._setLocalAxes(mesh);\r\n        this._actHist = new ActHist(mesh, 10);\r\n        this._lhsRhs = this._check_LHS_RHS(mesh);\r\n        this.refreshBoundingInfo();\r\n    }\r\n\r\n    public switchCamera(camera: Camera) {\r\n        this._mainCamera = camera;\r\n    }\r\n\r\n    public setUndoCount(c: number) {\r\n        this._actHist.setCapacity(c);\r\n    }\r\n\r\n    public undo() {\r\n        let at: number = this._actHist.undo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    public redo() {\r\n        let at: number = this._actHist.redo();\r\n        this._mesh.computeWorldMatrix(true);\r\n        this._setLocalAxes(this._mesh);\r\n        this._callActionStartListener(at);\r\n        this._callActionListener(at);\r\n        this._callActionEndListener(at);\r\n    }\r\n\r\n    /**\r\n     * detach the edit control from the mesh and dispose off all\r\n     * resources created by the edit control\r\n     */\r\n    public detach() {\r\n        this._canvas.removeEventListener(\"pointerdown\", this._pointerdown, false);\r\n        this._canvas.removeEventListener(\"pointerup\", this._pointerup, false);\r\n        this._canvas.removeEventListener(\"pointermove\", this._pointermove, false);\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this.removeAllActionListeners();\r\n        this._disposeAll();\r\n    }\r\n    private _prevState: String = \"\";\r\n    private _hidden: boolean = false;\r\n\r\n    /**\r\n     * hide the edit control. use show() to unhide the control.\r\n     */\r\n    public hide() {\r\n        this._hidden = true;\r\n        if (this._transEnabled) {\r\n            this._prevState = \"T\";\r\n            this.disableTranslation();\r\n        } else if (this._rotEnabled) {\r\n            this._prevState = \"R\";\r\n            this.disableRotation();\r\n        } else if (this._scaleEnabled) {\r\n            this._prevState = \"S\";\r\n            this.disableScaling();\r\n        }\r\n        this._hideCommonAxes();\r\n    }\r\n\r\n    private _hideCommonAxes() {\r\n        this._xaxis.visibility = 0;\r\n        this._yaxis.visibility = 0;\r\n        this._zaxis.visibility = 0;\r\n    }\r\n    private _showCommonAxes() {\r\n        this._xaxis.visibility = this._visibility;\r\n        this._yaxis.visibility = this._visibility;\r\n        this._zaxis.visibility = this._visibility;\r\n    }\r\n    /**\r\n     * unhide the editcontrol hidden using the hide() method\r\n     */\r\n    public show() {\r\n        this._hidden = false;\r\n        this._showCommonAxes();\r\n        if (this._prevState == \"T\") this.enableTranslation();\r\n        else if (this._prevState == \"R\") this.enableRotation();\r\n        else if (this._prevState == \"S\") this.enableScaling();\r\n    }\r\n\r\n    /**\r\n     * check if the editcontrol was hidden using the hide() methods\r\n     */\r\n    public isHidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    private _disposeAll() {\r\n        this._ecRoot.dispose();\r\n        this._disposeMaterials();\r\n        this._actHist = null;\r\n    }\r\n\r\n    private _actionListener: (actionType: number) => void = null;\r\n    private _actionStartListener: (actionType: number) => void = null;\r\n    private _actionEndListener: (actionType: number) => void = null;\r\n\r\n    public addActionListener(actionListener: (actionType: number) => void) {\r\n        this._actionListener = actionListener;\r\n    }\r\n    public removeActionListener() {\r\n        this._actionListener = null;\r\n    }\r\n    public addActionStartListener(actionStartListener: (actionType: number) => void) {\r\n        this._actionStartListener = actionStartListener;\r\n    }\r\n    public removeActionStartListener() {\r\n        this._actionStartListener = null;\r\n    }\r\n    public addActionEndListener(actionEndListener: (actionType: number) => void) {\r\n        this._actionEndListener = actionEndListener;\r\n    }\r\n    public removeActionEndListener() {\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    public removeAllActionListeners() {\r\n        this._actionListener = null;\r\n        this._actionStartListener = null;\r\n        this._actionEndListener = null;\r\n    }\r\n\r\n    private _pDown: boolean = false;\r\n\r\n    private _axisPicked: Mesh;\r\n\r\n    private _onPointerDown(evt: Event) {\r\n        evt.preventDefault();\r\n        this._pDown = true;\r\n        if ((<PointerEvent>evt).button != 0) return;\r\n        let engine: Engine = this._scene.getEngine();\r\n        let x = (engine.isPointerLock) ? this._canvas.width * 0.5 : this._scene.pointerX;\r\n        let y = (engine.isPointerLock) ? this._canvas.height * 0.5 : this._scene.pointerY;\r\n        let pickResult: PickingInfo = this._scene.pick(x, y, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if ((this._scaleEnabled)) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickResult.hit) {\r\n            //this.setAxesVisiblity(0);\r\n            this._axisPicked = <Mesh>pickResult.pickedMesh;\r\n            let childs: Node[] = this._axisPicked.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).visibility = this._visibility;\r\n            } else {\r\n                this._axisPicked.visibility = this._visibility;\r\n            }\r\n            let name: string = this._axisPicked.name;\r\n            if ((name == \"X\")) this._bXaxis.visibility = 1;\r\n            else if ((name == \"Y\")) this._bYaxis.visibility = 1;\r\n            else if ((name == \"Z\")) this._bZaxis.visibility = 1;\r\n            else if ((name == \"XZ\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            } else if ((name == \"ZY\")) {\r\n                this._bZaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n            } else if ((name == \"YX\")) {\r\n                this._bYaxis.visibility = 1;\r\n                this._bXaxis.visibility = 1;\r\n            } else if ((name == \"ALL\")) {\r\n                this._bXaxis.visibility = 1;\r\n                this._bYaxis.visibility = 1;\r\n                this._bZaxis.visibility = 1;\r\n            }\r\n            this._setEditing(true);\r\n            //lets find out where we are on the pickplane\r\n            this._pickedPlane = this._getPickPlane(this._axisPicked);\r\n            if (this._pickedPlane != null) {\r\n                this._prevPos = this._getPosOnPickPlane();\r\n            } else {\r\n                this._prevPos = null;\r\n            }\r\n            window.setTimeout(((cam, can) => { return this._detachCamera(cam, can) }), 0, this._mainCamera, this._canvas);\r\n        }\r\n    }\r\n\r\n    private _setEditing(editing: boolean) {\r\n        this._editing = editing;\r\n        if (editing) {\r\n            this._setActionType();\r\n            if (this._actionType == ActionType.ROT) {\r\n                this._snapRA = 0;\r\n            }\r\n            this._callActionStartListener(this._actionType);\r\n        } else {\r\n            this._callActionEndListener(this._actionType);\r\n        }\r\n    }\r\n\r\n    public isEditing(): boolean {\r\n        return this._editing;\r\n    }\r\n\r\n    /**\r\n     * no camera movement during edit\r\n     */\r\n    private _detachCamera(cam: Object, can: Object) {\r\n        let camera: Camera = <Camera>cam;\r\n        let canvas: HTMLCanvasElement = <HTMLCanvasElement>can;\r\n        let engine: Engine = this._scene.getEngine();\r\n        if (!engine.isPointerLock) {\r\n            camera.detachControl(canvas)\r\n        }\r\n    }\r\n\r\n    private _prevOverMesh: Mesh;\r\n\r\n    private _pointerIsOver: boolean = false;\r\n\r\n    public isPointerOver(): boolean {\r\n        return this._pointerIsOver;\r\n    }\r\n    private _savedMat: Material;\r\n    private _savedCol: Color3;\r\n    private _onPointerOver() {\r\n        //if(this.pDown) return;\r\n        let engine: Engine = this._scene.getEngine();\r\n        let x = (engine.isPointerLock) ? this._canvas.width * 0.5 : this._scene.pointerX;\r\n        let y = (engine.isPointerLock) ? this._canvas.height * 0.5 : this._scene.pointerY;\r\n        let pickResult: PickingInfo = this._scene.pick(x, y, (mesh) => {\r\n            if (this._transEnabled) {\r\n                if ((mesh == this._tX) || (mesh == this._tY) || (mesh == this._tZ) || (mesh == this._tXZ) || (mesh == this._tZY) || (mesh == this._tYX) || (mesh == this._tAll)) return true;\r\n            } else if ((this._rotEnabled)) {\r\n                if ((mesh == this._rX) || (mesh == this._rY) || (mesh == this._rZ) || (mesh == this._rAll)) return true;\r\n            } else if (this._scaleEnabled) {\r\n                if ((mesh == this._sX) || (mesh == this._sY) || (mesh == this._sZ) || (mesh == this._sXZ) || (mesh == this._sZY) || (mesh == this._sYX) || (mesh == this._sAll)) return true;\r\n            }\r\n            return false;\r\n        }, null, this._mainCamera);\r\n        if (pickResult.hit) {\r\n            //if we are still over the same axis mesh then don't do anything\r\n            if (<Mesh>pickResult.pickedMesh != this._prevOverMesh) {\r\n                this._pointerIsOver = true;\r\n                //if we moved directly from one axis mesh to this then clean up the prev axis mesh\r\n                this._clearPrevOverMesh();\r\n                this._prevOverMesh = <Mesh>pickResult.pickedMesh;\r\n                if (this._rotEnabled) {\r\n                    this._savedCol = (<LinesMesh>this._prevOverMesh.getChildren()[0]).color;\r\n                    (<LinesMesh>this._prevOverMesh.getChildren()[0]).color = this._whiteCol;\r\n                } else {\r\n                    let childs: Node[] = this._prevOverMesh.getChildren();\r\n                    if (childs.length > 0) {\r\n                        this._savedMat = (<Mesh>childs[0]).material;\r\n                        (<Mesh>childs[0]).material = this._whiteMat;\r\n                    } else {\r\n                        this._savedMat = this._prevOverMesh.material;\r\n                        this._prevOverMesh.material = this._whiteMat;\r\n                    }\r\n                }\r\n                if (this._prevOverMesh.name == \"X\") {\r\n                    this._xaxis.color = this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Y\") {\r\n                    this._yaxis.color = this._whiteCol;\r\n                } else if (this._prevOverMesh.name == \"Z\") {\r\n                    this._zaxis.color = this._whiteCol;\r\n                }\r\n            }\r\n        } else {\r\n            this._pointerIsOver = false;\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    //clean up any axis we might have been howering over before\r\n    private _clearPrevOverMesh() {\r\n        if (this._prevOverMesh != null) {\r\n            this._prevOverMesh.visibility = 0;\r\n            this._restoreColor(this._prevOverMesh);\r\n        }\r\n    }\r\n\r\n    private _restoreColor(mesh: Mesh) {\r\n        switch (mesh.name) {\r\n            case \"X\":\r\n                this._xaxis.color = this._redCol;\r\n                break;\r\n            case \"Y\":\r\n                this._yaxis.color = this._greenCol;\r\n                break;\r\n            case \"Z\":\r\n                this._zaxis.color = this._blueCol;\r\n                break;\r\n        }\r\n\r\n        if (this._rotEnabled) {\r\n            (<LinesMesh>mesh.getChildren()[0]).color = this._savedCol;\r\n        } else {\r\n            let childs: Node[] = mesh.getChildren();\r\n            if (childs.length > 0) {\r\n                (<Mesh>childs[0]).material = this._savedMat;\r\n            } else {\r\n                mesh.material = this._savedMat;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _editing: boolean = false;\r\n\r\n    private _onPointerUp(evt: Event) {\r\n        this._pDown = false;\r\n        if (this._editing) {\r\n            let engine: Engine = this._scene.getEngine();\r\n            if (!engine.isPointerLock) {\r\n                this._mainCamera.attachControl(this._canvas);\r\n            }\r\n            this._setEditing(false);\r\n            //this.setAxesVisiblity(1);\r\n            this._hideBaxis();\r\n            if (this._prevOverMesh != null) {\r\n                this._restoreColor(this._prevOverMesh);\r\n                this._prevOverMesh = null;\r\n            }\r\n            this._actHist.add(this._actionType);\r\n        }\r\n    }\r\n\r\n    private _actionType: number;\r\n    private _setActionType() {\r\n        if (this._transEnabled) {\r\n            this._actionType = ActionType.TRANS;\r\n        } else if ((this._rotEnabled)) {\r\n            this._actionType = ActionType.ROT;\r\n        } else if ((this._scaleEnabled)) {\r\n            this._actionType = ActionType.SCALE;\r\n        }\r\n    }\r\n\r\n    private _callActionListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionListener != null) {\r\n            this._actionListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionStartListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionStartListener != null) {\r\n            this._actionStartListener(at);\r\n        }\r\n\r\n    }\r\n    private _callActionEndListener(at: number) {\r\n        //call actionListener if registered\r\n        if (this._actionEndListener != null) {\r\n            this._actionEndListener(at);\r\n        }\r\n\r\n    }\r\n\r\n    private _prevPos: Vector3;\r\n    private _onPointerMove(evt: Event) {\r\n\r\n        if (!this._pDown) {\r\n            this._onPointerOver();\r\n            return;\r\n        }\r\n        if (!this._editing) return;\r\n        if (this._prevPos == null) return;\r\n\r\n        let newPos: Vector3 = this._getPosOnPickPlane();\r\n\r\n        if (newPos == null) return;\r\n\r\n        if (this._rotEnabled) {\r\n            this._doRotation(this._mesh, this._axisPicked, newPos, this._prevPos);\r\n        } else {\r\n            let diff: Vector3 = newPos.subtract(this._prevPos);\r\n            if (diff.x == 0 && diff.y == 0 && diff.z == 0) return;\r\n            if (this._transEnabled) {\r\n                this._doTranslation(diff);\r\n            } else {\r\n                if (this._scaleEnabled && this._local) this._doScaling(diff);\r\n            }\r\n        }\r\n        this._prevPos = newPos;\r\n        this._callActionListener(this._actionType);\r\n    }\r\n\r\n\r\n    //rotate differently if camera is too close to the rotation plane\r\n    private _rotate2: boolean = false;\r\n    private _getPickPlane(axis: Mesh): Mesh {\r\n        let n: string = axis.name;\r\n        if (this._transEnabled || this._scaleEnabled) {\r\n            if (n == \"XZ\") return this._pXZ;\r\n            else if (n == \"ZY\") return this._pZY;\r\n            else if (n == \"YX\") return this._pYX;\r\n            else if (n == \"ALL\") return this._pALL;\r\n            else {\r\n                //get the position of camera in the edit control frame of reference\r\n                this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n                Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n                let c = this._ecTOcamera;\r\n                if (n === \"X\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.z)) {\r\n                        return this._pXZ;\r\n                    } else return this._pYX;\r\n                } else if (n === \"Z\") {\r\n                    if (Math.abs(c.y) > Math.abs(c.x)) {\r\n                        return this._pXZ;\r\n                    } else return this._pZY;\r\n                } else if (n === \"Y\") {\r\n                    if (Math.abs(c.z) > Math.abs(c.x)) {\r\n                        return this._pYX;\r\n                    } else return this._pZY;\r\n                }\r\n            }\r\n        } else if (this._rotEnabled) {\r\n            this._rotate2 = false;\r\n            //get the position of camera in the edit control frame of reference\r\n            this._ecRoot.getWorldMatrix().invertToRef(this._ecMatrix);\r\n            Vector3.TransformCoordinatesToRef(this._mainCamera.position, this._ecMatrix, this._ecTOcamera);\r\n            let c = this._ecTOcamera;\r\n            //if camera is too close to the rotation plane then use alternate rotation process\r\n            switch (n) {\r\n                case \"X\":\r\n                    if (Math.abs(c.x) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pZY;\r\n                case \"Y\":\r\n                    if (Math.abs(c.y) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pXZ;\r\n                case \"Z\":\r\n                    if (Math.abs(c.z) < 0.2) {\r\n                        this._rotate2 = true;\r\n                        return this._pALL;\r\n                    } else return this._pYX;\r\n                default:\r\n                    return this._pALL;\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    //TODO when translating, the orientation of pALL keeps changing\r\n    //TODo this is not so with rotation or scaling\r\n    //TODO so for translation instead of pALL maybe we should use the camera view plane for picking\r\n\r\n    private _transBy: Vector3 = new Vector3(0, 0, 0);\r\n    private _doTranslation(diff: Vector3) {\r\n\r\n        if ((this._mesh.parent != null) && this._isScaleUnEqual(this._mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(this._mesh);\r\n        }\r\n\r\n        let n: string = this._axisPicked.name;\r\n\r\n        this._transBy.x = 0; this._transBy.y = 0; this._transBy.z = 0;\r\n\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            else this._transBy.x = diff.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            else this._transBy.y = diff.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\") || (n == \"ALL\")) {\r\n            if (this._local) this._transBy.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            else this._transBy.z = diff.z;\r\n        }\r\n\r\n        this._transWithSnap(this._mesh, this._transBy, this._local);\r\n\r\n        // bound the translation\r\n        if (this._transBoundsMin) {\r\n            this._mesh.position.x = Math.max(this._mesh.position.x, this._transBoundsMin.x);\r\n            this._mesh.position.y = Math.max(this._mesh.position.y, this._transBoundsMin.y);\r\n            this._mesh.position.z = Math.max(this._mesh.position.z, this._transBoundsMin.z);\r\n        }\r\n        if (this._transBoundsMax) {\r\n            this._mesh.position.x = Math.min(this._mesh.position.x, this._transBoundsMax.x);\r\n            this._mesh.position.y = Math.min(this._mesh.position.y, this._transBoundsMax.y);\r\n            this._mesh.position.z = Math.min(this._mesh.position.z, this._transBoundsMax.z);\r\n        }\r\n\r\n        this._mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _snapTV: Vector3 = new Vector3(0, 0, 0);\r\n    private _transWithSnap(mesh: TransformNode, trans: Vector3, local: boolean) {\r\n        if (this._snapT) {\r\n            let snapit: boolean = false;\r\n            this._snapTV.addInPlace(trans);\r\n            if (Math.abs(this._snapTV.x) > this._tSnap.x) {\r\n                if (this._snapTV.x > 0) trans.x = this._tSnap.x; else trans.x = -this._tSnap.x;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.y) > this._tSnap.y) {\r\n                if (this._snapTV.y > 0) trans.y = this._tSnap.y; else trans.y = -this._tSnap.y;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapTV.z) > this._tSnap.z) {\r\n                if (this._snapTV.z > 0) trans.z = this._tSnap.z; else trans.z = -this._tSnap.z;\r\n                snapit = true;\r\n            }\r\n            if (snapit) {\r\n                if (Math.abs(trans.x) !== this._tSnap.x) trans.x = 0;\r\n                if (Math.abs(trans.y) !== this._tSnap.y) trans.y = 0;\r\n                if (Math.abs(trans.z) !== this._tSnap.z) trans.z = 0;\r\n                Vector3.FromFloatsToRef(0, 0, 0, this._snapTV);\r\n                snapit = false;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (local) {\r\n            //locallyTranslate moves the mesh wrt the absolute location not pivotlocation :(\r\n            //this.mesh.locallyTranslate(trans);\r\n            //\r\n            this._localX.normalizeToRef(this._tv1);\r\n            this._localY.normalizeToRef(this._tv2);\r\n            this._localZ.normalizeToRef(this._tv3);\r\n            this._mesh.translate(this._tv1, trans.x, Space.WORLD);\r\n            this._mesh.translate(this._tv2, trans.y, Space.WORLD);\r\n            this._mesh.translate(this._tv3, trans.z, Space.WORLD);\r\n        } else {\r\n            if (this._mesh.parent == null) {\r\n                this._mesh.position.addInPlace(trans);\r\n            } else {\r\n                this._mesh.setAbsolutePosition(trans.addInPlace(this._mesh.absolutePosition));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private _snapS: boolean = false;\r\n    private _snapSV: Vector3 = new Vector3(0, 0, 0);\r\n    private _scaleSnap: number = 0.25;\r\n    private _scale: Vector3 = new Vector3(0, 0, 0);\r\n    private _doScaling(diff: Vector3) {\r\n        this._setLocalAxes(this._mesh);\r\n\r\n        this._scale.x = 0;\r\n        this._scale.y = 0;\r\n        this._scale.z = 0;\r\n        let n: string = this._axisPicked.name;\r\n        if ((n == \"X\") || (n == \"XZ\") || (n == \"YX\")) {\r\n            this._scale.x = Vector3.Dot(diff, this._localX) / this._localX.length();\r\n            if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n            //if(this.lhsRhs) this.scale.x=-this.scale.x;\r\n        }\r\n        if ((n == \"Y\") || (n == \"ZY\") || (n == \"YX\")) {\r\n            this._scale.y = Vector3.Dot(diff, this._localY) / this._localY.length();\r\n            if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n        }\r\n        if ((n == \"Z\") || (n == \"XZ\") || (n == \"ZY\")) {\r\n            this._scale.z = Vector3.Dot(diff, this._localZ) / this._localZ.length();\r\n            if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n        }\r\n\r\n        //as the mesh becomes large reduce the amount by which we scale.\r\n        let bbd = this._boundingDimesion;\r\n        this._scale.x = this._scale.x / bbd.x;\r\n        this._scale.y = this._scale.y / bbd.y;\r\n        this._scale.z = this._scale.z / bbd.z;\r\n\r\n        if (n == \"ALL\") {\r\n            //project movement along camera up vector\r\n            //if up then scale up else scale down\r\n            let s: number = Vector3.Dot(diff, this._mainCamera.upVector);\r\n            s = s / Math.max(bbd.x, bbd.y, bbd.z);\r\n            this._scale.copyFromFloats(s, s, s);\r\n        } else {\r\n            let inPlane: boolean = false;\r\n            if (n == \"XZ\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.x) > Math.abs(this._scale.z)) {\r\n                    this._scale.z = this._scale.x;\r\n                } else this._scale.x = this._scale.z;\r\n            } else if (n == \"ZY\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.z) > Math.abs(this._scale.y)) {\r\n                    this._scale.y = this._scale.z;\r\n                } else this._scale.z = this._scale.y;\r\n            } else if (n == \"YX\") {\r\n                inPlane = true;\r\n                if (Math.abs(this._scale.y) > Math.abs(this._scale.x)) {\r\n                    this._scale.x = this._scale.y;\r\n                } else this._scale.y = this._scale.x;\r\n            }\r\n            if (inPlane) {\r\n                //check if the mouse/pointer was moved towards camera or away from camera\r\n                //if towards then scale up else scale down\r\n                this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n                let s: number = Vector3.Dot(diff, this._cameraTOec);\r\n                this._scale.x = Math.abs(this._scale.x);\r\n                this._scale.y = Math.abs(this._scale.y);\r\n                this._scale.z = Math.abs(this._scale.z);\r\n                if (s > 0) {\r\n                    if (this._mesh.scaling.x > 0) this._scale.x = -this._scale.x;\r\n                    //if(this.lhsRhs) this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.y > 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z > 0) this._scale.z = -this._scale.z;\r\n                } else {\r\n                    //this.scale.x=Math.abs(this.scale.x);\r\n                    //if(this.lhsRhs) this.scale.y=-Math.abs(this.scale.y);\r\n                    //else this.scale.y=Math.abs(this.scale.y);\r\n                    if (this._mesh.scaling.x < 0) this._scale.x = -this._scale.x;\r\n                    if (this._mesh.scaling.y < 0) this._scale.y = -this._scale.y;\r\n                    if (this._mesh.scaling.z < 0) this._scale.z = -this._scale.z;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this._scaleWithSnap(this._mesh, this._scale);\r\n\r\n        // bound the scale\r\n        if (this._scaleBoundsMin) {\r\n            this._mesh.scaling.x = Math.max(this._mesh.scaling.x, this._scaleBoundsMin.x);\r\n            this._mesh.scaling.y = Math.max(this._mesh.scaling.y, this._scaleBoundsMin.y);\r\n            this._mesh.scaling.z = Math.max(this._mesh.scaling.z, this._scaleBoundsMin.z);\r\n        }\r\n        if (this._scaleBoundsMax) {\r\n            this._mesh.scaling.x = Math.min(this._mesh.scaling.x, this._scaleBoundsMax.x);\r\n            this._mesh.scaling.y = Math.min(this._mesh.scaling.y, this._scaleBoundsMax.y);\r\n            this._mesh.scaling.z = Math.min(this._mesh.scaling.z, this._scaleBoundsMax.z);\r\n        }\r\n\r\n    }\r\n\r\n    private _scaleWithSnap(mesh: TransformNode, p: Vector3) {\r\n        if (this._snapS) {\r\n            let snapit: boolean = false;\r\n            this._snapSV.addInPlace(p);\r\n            if (Math.abs(this._snapSV.x) > this._scaleSnap) {\r\n                if (p.x > 0) p.x = this._scaleSnap; else p.x = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.y) > this._scaleSnap) {\r\n                if (p.y > 0) p.y = this._scaleSnap; else p.y = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (Math.abs(this._snapSV.z) > this._scaleSnap) {\r\n                if (p.z > 0) p.z = this._scaleSnap; else p.z = -this._scaleSnap;\r\n                snapit = true;\r\n            }\r\n            if (!snapit) return;\r\n            if ((Math.abs(p.x) !== this._scaleSnap) && (p.x !== 0)) p.x = 0;\r\n            if ((Math.abs(p.y) !== this._scaleSnap) && (p.y !== 0)) p.y = 0;\r\n            if ((Math.abs(p.z) !== this._scaleSnap) && (p.z !== 0)) p.z = 0;\r\n            Vector3.FromFloatsToRef(0, 0, 0, this._snapSV);\r\n            snapit = false;\r\n        }\r\n        mesh.scaling.addInPlace(p);\r\n\r\n    }\r\n\r\n    private _localX: Vector3 = new Vector3(0, 0, 0);\r\n    private _localY: Vector3 = new Vector3(0, 0, 0);\r\n    private _localZ: Vector3 = new Vector3(0, 0, 0);\r\n\r\n    /*\r\n     * This would be called after rotation or scaling as the local axes direction or length might have changed\r\n     * We need to set the local axis as these are used in all three modes to figure out \r\n     * direction of mouse move wrt the axes\r\n     * TODO should use world pivotmatrix instead of worldmatrix - incase pivot axes were rotated?\r\n     */\r\n    private _setLocalAxes(mesh: Node) {\r\n        let meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 0, this._localX);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 4, this._localY);\r\n        Vector3.FromFloatArrayToRef(meshMatrix.m, 8, this._localZ);\r\n    }\r\n\r\n\r\n    /*\r\n     * boundingDimesion is used by scaling to adjust rate at which a mesh is scaled\r\n     * with respect to mouse movement.\r\n     *\r\n     */\r\n    private _boundingDimesion: Vector3;\r\n    private _getBoundingDimension(mesh: TransformNode): Vector3 {\r\n        if (mesh instanceof AbstractMesh) {\r\n            { } let bb: BoundingBox = mesh.getBoundingInfo().boundingBox;\r\n            let bd: Vector3 = bb.maximum.subtract(bb.minimum);\r\n            if (bd.x == 0) bd.x = 1;\r\n            if (bd.y == 0) bd.y = 1;\r\n            if (bd.z == 0) bd.z = 1;\r\n            return bd;\r\n        } else return new Vector3(1, 1, 1);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * For the sake of speed the editcontrol calculates bounding info only once.\r\n     * This is in the constructor.\r\n     * Now The boundingbox dimension can change if the mesh is baked.\r\n     * If the editcontrol is attached to the mesh when the mesh was baked then\r\n     * the scaling speed will be incorrect.\r\n     * Thus client application should call refreshBoundingInfo if it bakes the mesh.\r\n     *\r\n     */\r\n    public refreshBoundingInfo() {\r\n        this._boundingDimesion = this._getBoundingDimension(this._mesh);\r\n    }\r\n\r\n    private _eulerian: boolean = false;\r\n    private _snapRA: number = 0;\r\n    private _doRotation(mesh: TransformNode, axis: Mesh, newPos: Vector3, prevPos: Vector3) {\r\n\r\n        //for now no rotation if parents have non uniform scale\r\n        if (this._local && (this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n            this._setLocalAxes(this._ecRoot);\r\n        } else {\r\n            this._setLocalAxes(mesh);\r\n        }\r\n\r\n        let angle: number = 0;\r\n\r\n        //rotation axis\r\n        let rAxis: Vector3;\r\n        if (axis == this._rX) rAxis = this._local ? this._localX : Axis.X;\r\n        else if (axis == this._rY) rAxis = this._local ? this._localY : Axis.Y;\r\n        else if (axis == this._rZ) rAxis = this._local ? this._localZ : Axis.Z;\r\n\r\n        this._ecRoot.position.subtractToRef(this._mainCamera.position, this._cameraTOec);\r\n\r\n        /**\r\n         * A)first find the angle and the direction (clockwise or anticlockwise) by which the user was trying to rotate\r\n         * from the user(camera) perspective\r\n         */\r\n        if (this._rotate2) {\r\n            angle = this._getAngle2(prevPos, newPos, this._mainCamera.position, this._cameraTOec, rAxis);\r\n            //TODO check why we need to handle righ hand this way\r\n            if (this._scene.useRightHandedSystem) angle = -angle;\r\n        } else {\r\n            angle = this._getAngle(prevPos, newPos, mesh.getAbsolutePivotPoint(), this._cameraTOec);\r\n        }\r\n\r\n        if (this._lhsRhs) {\r\n            angle = -angle;\r\n        }\r\n        /**\r\n         * B)then rotate based on users(camera) postion and orientation in the local/world space\r\n         * \r\n         */\r\n\r\n        if (this._snapR) {\r\n            this._snapRA += angle;\r\n            angle = 0;\r\n            if (Math.abs(this._snapRA) >= this._rotSnap) {\r\n                if (this._snapRA > 0) angle = this._rotSnap; else angle = -this._rotSnap;\r\n                this._snapRA = 0;\r\n            }\r\n        }\r\n\r\n        if (angle !== 0) {\r\n            this._cameraTOec.normalize();\r\n            if (axis == this._rAll) {\r\n                mesh.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n            } else {\r\n                if (Vector3.Dot(rAxis, this._cameraTOec) >= 0) angle = -angle;\r\n                mesh.rotate(rAxis, angle, Space.WORLD);\r\n            }\r\n\r\n            if (this._eulerian) {\r\n                mesh.rotation = mesh.rotationQuaternion.toEulerAngles();\r\n                mesh.rotationQuaternion = null;\r\n            }\r\n\r\n            if (this._local) {\r\n                if (this._lhsRhs) {\r\n                    angle = -angle;\r\n                }\r\n                if ((this._mesh.parent != null) && this._isScaleUnEqual(mesh)) {\r\n                    if (axis == this._rAll) {\r\n                        this._ecRoot.rotate(this._cameraTOec, -angle, Space.WORLD);\r\n                    } else {\r\n                        this._ecRoot.rotate(rAxis, angle, Space.WORLD);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getPosOnPickPlane(): Vector3 {\r\n        let engine: Engine = this._scene.getEngine();\r\n        let x = (engine.isPointerLock) ? this._canvas.width * 0.5 : this._scene.pointerX;\r\n        let y = (engine.isPointerLock) ? this._canvas.height * 0.5 : this._scene.pointerY;\r\n        let pickinfo: PickingInfo = this._scene.pick(x, y, (mesh) => {\r\n            return mesh == this._pickedPlane;\r\n        }, null, this._mainCamera);\r\n\r\n        if (pickinfo.hit) {\r\n            return pickinfo.pickedPoint;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _hideBaxis() {\r\n        this._bXaxis.visibility = 0;\r\n        this._bYaxis.visibility = 0;\r\n        this._bZaxis.visibility = 0;\r\n    }\r\n\r\n    //    private _setAxesVisiblity(v: number) {\r\n    //        if (this._transEnabled) {\r\n    //            this._tEndX.visibility = v;\r\n    //            this._tEndY.visibility = v;\r\n    //            this._tEndZ.visibility = v;\r\n    //            this._tEndXZ.visibility = v;\r\n    //            this._tEndZY.visibility = v;\r\n    //            this._tEndYX.visibility = v;\r\n    //            this._tEndAll.visibility = v;\r\n    //        }\r\n    //        if (this._rotEnabled) {\r\n    //            this._rEndX.visibility = v;\r\n    //            this._rEndY.visibility = v;\r\n    //            this._rEndZ.visibility = v;\r\n    //            this._rEndAll.visibility = v;\r\n    //        }\r\n    //        if (this._scaleEnabled) {\r\n    //            this._sEndX.visibility = v;\r\n    //            this._sEndY.visibility = v;\r\n    //            this._sEndZ.visibility = v;\r\n    //            this._sEndXZ.visibility = v;\r\n    //            this._sEndZY.visibility = v;\r\n    //            this._sEndYX.visibility = v;\r\n    //            this._sEndAll.visibility = v;\r\n    //        }\r\n    //    }\r\n\r\n    public getRotationQuaternion(): Quaternion {\r\n        return this._ecRoot.rotationQuaternion\r\n    }\r\n\r\n    public getPosition(): Vector3 {\r\n        return this._ecRoot.position;\r\n    }\r\n\r\n    private _transEnabled: boolean = false;\r\n\r\n    public isTranslationEnabled(): boolean {\r\n        return this._transEnabled;\r\n    }\r\n\r\n    public enableTranslation() {\r\n        if (this._hidden) return;\r\n        if (this._tX == null) {\r\n            this._createTransAxes();\r\n            this._tCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd, this._visibility);\r\n            this._transEnabled = true;\r\n            this.disableRotation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableTranslation() {\r\n        if (this._transEnabled) {\r\n            this._setVisibility(this._all_tEnd, 0);\r\n            this._transEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _rotEnabled: boolean = false;\r\n\r\n    public isRotationEnabled(): boolean {\r\n        return this._rotEnabled;\r\n    }\r\n\r\n    public returnEuler(euler: boolean) {\r\n        this._eulerian = euler;\r\n    }\r\n\r\n    public enableRotation() {\r\n        if (this._hidden) return;\r\n        if (this._rCtl == null) {\r\n            this._createRotAxes();\r\n            this._rCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd, this._visibility);\r\n            this._rotEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableScaling();\r\n        }\r\n    }\r\n\r\n    public disableRotation() {\r\n        if (this._rotEnabled) {\r\n            this._setVisibility(this._all_rEnd, 0);\r\n            this._rotEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleEnabled: boolean = false;\r\n\r\n    public isScalingEnabled(): boolean {\r\n        return this._scaleEnabled;\r\n    }\r\n\r\n    public enableScaling() {\r\n        if (this._hidden) return;\r\n        if (this._sX == null) {\r\n            this._createScaleAxes();\r\n            this._sCtl.parent = this._ecRoot;\r\n        }\r\n        this._clearPrevOverMesh();\r\n        if (!this._scaleEnabled) {\r\n            this._setVisibility(this._all_sEnd, this._visibility);\r\n            this._scaleEnabled = true;\r\n            this.disableTranslation();\r\n            this.disableRotation();\r\n        }\r\n    }\r\n\r\n    public disableScaling() {\r\n        if (this._scaleEnabled) {\r\n            this._setVisibility(this._all_sEnd, 0);\r\n            this._scaleEnabled = false;\r\n        }\r\n    }\r\n\r\n    private _scaleBoundsMin: Vector3;\r\n    private _scaleBoundsMax: Vector3;\r\n\r\n    public setScaleBounds(min?: Vector3, max?: Vector3) {\r\n        this._scaleBoundsMin = min ? min : null;\r\n        this._scaleBoundsMax = max ? max : null;\r\n        if (this._scaleBoundsMin != null) {\r\n            if (this._scaleBoundsMin.x == 0) this._scaleBoundsMin.x = 0.00000001;\r\n            if (this._scaleBoundsMin.y == 0) this._scaleBoundsMin.y = 0.00000001;\r\n            if (this._scaleBoundsMin.z == 0) this._scaleBoundsMin.z = 0.00000001;\r\n        }\r\n    }\r\n\r\n    public removeScaleBounds() {\r\n        this._scaleBoundsMin = null;\r\n        this._scaleBoundsMax = null;\r\n    }\r\n\r\n\r\n    private _transBoundsMin: Vector3;\r\n    private _transBoundsMax: Vector3;\r\n\r\n    public setTransBounds(min?: Vector3, max?: Vector3) {\r\n        this._transBoundsMin = min ? min : null;\r\n        this._transBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeTransBounds() {\r\n        this._transBoundsMin = null;\r\n        this._transBoundsMax = null;\r\n    }\r\n\r\n    private _rotBoundsMin: Vector3;\r\n    private _rotBoundsMax: Vector3;\r\n\r\n    public setRotBounds(min?: Vector3, max?: Vector3) {\r\n        this._rotBoundsMin = min ? min : null;\r\n        this._rotBoundsMax = max ? max : null;\r\n    }\r\n\r\n    public removeRotBounds() {\r\n        this._rotBoundsMin = null;\r\n        this._rotBoundsMax = null;\r\n    }\r\n\r\n    private _bXaxis: LinesMesh;\r\n    private _bYaxis: LinesMesh;\r\n    private _bZaxis: LinesMesh;\r\n    private _xaxis: LinesMesh;\r\n    private _yaxis: LinesMesh;\r\n    private _zaxis: LinesMesh;\r\n\r\n\r\n    /*\r\n     * create big and small axeses which will be shown in translate, rotate and scale mode.\r\n     *\r\n     */\r\n    private _createCommonAxes(): Mesh {\r\n\r\n        let guideAxes: Mesh = new Mesh(\"\", this._scene);\r\n\r\n        //the big axes, shown when an axis is selected\r\n        this._bXaxis = Mesh.CreateLines(\"\", [new Vector3(-100, 0, 0), new Vector3(100, 0, 0)], this._scene);\r\n        this._bYaxis = Mesh.CreateLines(\"\", [new Vector3(0, -100, 0), new Vector3(0, 100, 0)], this._scene);\r\n        this._bZaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, -100), new Vector3(0, 0, 100)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._bXaxis.isPickable = false;\r\n        this._bYaxis.isPickable = false;\r\n        this._bZaxis.isPickable = false;\r\n\r\n        this._bXaxis.parent = guideAxes;\r\n        this._bYaxis.parent = guideAxes;\r\n        this._bZaxis.parent = guideAxes;\r\n        this._bXaxis.color = this._redCol;\r\n        this._bYaxis.color = this._greenCol\r\n        this._bZaxis.color = this._blueCol\r\n        this._hideBaxis();\r\n\r\n        //the small axis\r\n        let al: number = this._axesLen * this._axesScale * 0.75;\r\n        this._xaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(al, 0, 0)], this._scene);\r\n        this._yaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, al, 0)], this._scene);\r\n        this._zaxis = Mesh.CreateLines(\"\", [new Vector3(0, 0, 0), new Vector3(0, 0, al)], this._scene);\r\n\r\n        //lines are now pickable too\r\n        this._xaxis.isPickable = false;\r\n        this._yaxis.isPickable = false;\r\n        this._zaxis.isPickable = false;\r\n\r\n        this._xaxis.parent = guideAxes;\r\n        this._yaxis.parent = guideAxes;\r\n        this._zaxis.parent = guideAxes;\r\n        this._xaxis.color = this._redCol;\r\n        this._yaxis.color = this._greenCol;\r\n        this._zaxis.color = this._blueCol;\r\n\r\n        this._xaxis.renderingGroupId = 1;\r\n        this._yaxis.renderingGroupId = 1;\r\n        this._zaxis.renderingGroupId = 1;\r\n\r\n        return guideAxes;\r\n    }\r\n\r\n    private _pickedPlane: Mesh;\r\n    private _pALL: Mesh;\r\n    private _pXZ: Mesh;\r\n    private _pZY: Mesh;\r\n    private _pYX: Mesh;\r\n\r\n    private _createPickPlanes() {\r\n        this._pALL = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pXZ = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pZY = Mesh.CreatePlane(\"\", 5, this._scene);\r\n        this._pYX = Mesh.CreatePlane(\"\", 5, this._scene);\r\n\r\n        this._pALL.isPickable = false;\r\n        this._pXZ.isPickable = false;\r\n        this._pZY.isPickable = false;\r\n        this._pYX.isPickable = false;\r\n\r\n        this._pALL.visibility = 0;\r\n        this._pXZ.visibility = 0;\r\n        this._pZY.visibility = 0;\r\n        this._pYX.visibility = 0;\r\n\r\n        this._pALL.renderingGroupId = 1;\r\n        this._pXZ.renderingGroupId = 1;\r\n        this._pZY.renderingGroupId = 1;\r\n        this._pYX.renderingGroupId = 1;\r\n\r\n        this._pALL.lookAt(this._mainCamera.position);\r\n        this._pXZ.rotate(Axis.X, 1.57);\r\n        this._pZY.rotate(Axis.Y, 1.57);\r\n\r\n        let pickPlanes: Mesh = new Mesh(\"\", this._scene);\r\n        this._pALL.parent = pickPlanes;\r\n        this._pXZ.parent = pickPlanes;\r\n        this._pZY.parent = pickPlanes;\r\n        this._pYX.parent = pickPlanes;\r\n\r\n        return pickPlanes;\r\n\r\n\r\n    }\r\n\r\n    private _tCtl: Mesh;\r\n\r\n    private _tX: Mesh;\r\n    private _tY: Mesh;\r\n    private _tZ: Mesh;\r\n    private _tXZ: Mesh;\r\n    private _tZY: Mesh;\r\n    private _tYX: Mesh;\r\n    private _tAll: Mesh;\r\n    private _all_t: Mesh[];\r\n\r\n    private _tEndX: Mesh;\r\n    private _tEndY: Mesh;\r\n    private _tEndZ: Mesh;\r\n    private _tEndXZ: Mesh;\r\n    private _tEndZY: Mesh;\r\n    private _tEndYX: Mesh;\r\n    private _tEndAll: Mesh;\r\n\r\n    private _all_tEnd: Mesh[];\r\n\r\n    private _createTransAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._tCtl = new Mesh(\"\", this._scene);\r\n\r\n        /*pickable invisible boxes around axes lines*/\r\n        this._createPickableTrans(r, l, this._tCtl, this._scene);\r\n\r\n        //non pickable but visible cones at end of axes lines\r\n        this._createNonPickableTrans(r, l, this._scene);\r\n    }\r\n\r\n    private _createPickableTrans(r: number, l: number, tCtl: Mesh, scene: Scene) {\r\n        let tX = this._extrudeBox(r / 2, l);\r\n        tX.name = \"X\";\r\n        let tY = tX.clone(\"Y\");\r\n        let tZ = tX.clone(\"Z\");\r\n\r\n        let tXZ = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, scene);\r\n        let tZY = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, scene);\r\n        let tYX = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, scene);\r\n\r\n        tXZ.rotation.x = 1.57;\r\n        tZY.rotation.y = -1.57;\r\n\r\n        tXZ.position.x = 2 * r;\r\n        tXZ.position.z = 2 * r;\r\n\r\n        tZY.position.z = 2 * r;\r\n        tZY.position.y = 2 * r;\r\n\r\n        tYX.position.y = 2 * r;\r\n        tYX.position.x = 2 * r;\r\n\r\n        tXZ.bakeCurrentTransformIntoVertices();\r\n        tZY.bakeCurrentTransformIntoVertices();\r\n        tYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let tAll = Mesh.CreateBox(\"ALL\", r * 2, scene);\r\n\r\n        tX.parent = tCtl;\r\n        tY.parent = tCtl;\r\n        tZ.parent = tCtl;\r\n        tXZ.parent = tCtl;\r\n        tZY.parent = tCtl;\r\n        tYX.parent = tCtl;\r\n        tAll.parent = tCtl;\r\n\r\n        tX.rotation.y = 1.57;\r\n        tY.rotation.x -= 1.57;\r\n\r\n        this._tX = tX;\r\n        this._tY = tY;\r\n        this._tZ = tZ;\r\n        this._tXZ = tXZ;\r\n        this._tZY = tZY;\r\n        this._tYX = tYX;\r\n        this._tAll = tAll;\r\n        this._all_t = [tX, tY, tZ, tXZ, tZY, tYX, tAll]\r\n\r\n        this._setVisibility(this._all_t, 0);\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_t)\r\n    }\r\n\r\n    private _createNonPickableTrans(r: number, l: number, scene: Scene) {\r\n        //cone length\r\n        let cl: number = l / 5;\r\n        //cone base radius\r\n        //let cr: number = r;\r\n        let tEndX = Mesh.CreateCylinder(\"\", cl, 0, r, 6, 1, scene);\r\n        let tEndY = tEndX.clone(\"\");\r\n        let tEndZ = tEndX.clone(\"\");\r\n\r\n\r\n        let s = r * 2\r\n        let tEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: s }, scene);\r\n        let tEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: s }, scene);\r\n        let tEndYX = MeshBuilder.CreatePlane(\"YX\", { size: s }, scene);\r\n\r\n        let tEndAll = Mesh.CreateBox(\"ALL\", r, scene);\r\n\r\n        tEndX.rotation.x = 1.57;\r\n        tEndY.rotation.x = 1.57;\r\n        tEndZ.rotation.x = 1.57;\r\n\r\n        tEndXZ.rotation.x = 1.57;\r\n        tEndZY.rotation.y = 1.57;\r\n        //tEndYX.rotation.x = 0;\r\n\r\n        tEndXZ.position.x = s;\r\n        tEndXZ.position.z = s;\r\n\r\n        tEndZY.position.z = s;\r\n        tEndZY.position.y = s;\r\n\r\n        tEndYX.position.y = s;\r\n        tEndYX.position.x = s;\r\n\r\n        tEndX.parent = this._tX;\r\n        tEndY.parent = this._tY;\r\n        tEndZ.parent = this._tZ;\r\n        tEndXZ.parent = this._tXZ;\r\n        tEndZY.parent = this._tZY;\r\n        tEndYX.parent = this._tYX;\r\n        tEndAll.parent = this._tAll;\r\n\r\n        tEndX.position.z = l - cl / 2;\r\n        tEndY.position.z = l - cl / 2;\r\n        tEndZ.position.z = l - cl / 2;\r\n\r\n        tEndX.material = this._redMat;\r\n        tEndY.material = this._greenMat;\r\n        tEndZ.material = this._blueMat;\r\n        tEndXZ.material = this._greenMat;\r\n        tEndZY.material = this._redMat;\r\n        tEndYX.material = this._blueMat;\r\n        tEndAll.material = this._yellowMat;\r\n\r\n        this._tEndX = tEndX;\r\n        this._tEndY = tEndY;\r\n        this._tEndZ = tEndZ;\r\n        this._tEndXZ = tEndXZ;\r\n        this._tEndZY = tEndZY;\r\n        this._tEndYX = tEndYX;\r\n        this._tEndAll = tEndAll;\r\n        this._all_tEnd = [tEndX, tEndY, tEndZ, tEndXZ, tEndZY, tEndYX, tEndAll];\r\n\r\n        this._setPickableFalse(this._all_tEnd);\r\n        this._setRenderingGroup(this._all_tEnd);\r\n    }\r\n\r\n\r\n\r\n    private _rCtl: Mesh;\r\n\r\n    private _rX: Mesh;\r\n    private _rY: Mesh;\r\n    private _rZ: Mesh;\r\n    private _rAll: Mesh;\r\n    private _all_r: Mesh[];\r\n\r\n    private _rEndX: LinesMesh;\r\n    private _rEndY: LinesMesh;\r\n    private _rEndZ: LinesMesh;\r\n    private _rEndAll: LinesMesh;\r\n    private _rEndAll2: LinesMesh;\r\n    private _all_rEnd: Mesh[];\r\n\r\n\r\n    private _guideSize: number = 180;\r\n\r\n    public setRotGuideFull(y: boolean) {\r\n        if (y) this._guideSize = 360;\r\n        else this._guideSize = 180;\r\n        if (this._rCtl != null) {\r\n            this._rCtl.dispose();\r\n            this._rAll.dispose();\r\n            this._rCtl = null;\r\n            this.enableRotation();\r\n        }\r\n    }\r\n\r\n    private _createRotAxes() {\r\n        let d: number = this._axesLen * this._axesScale * 2;\r\n        this._rCtl = new Mesh(\"\", this._scene);\r\n\r\n        //pickable invisible torus around the rotation circles\r\n        this._createPickableRot(d, this._rCtl);\r\n\r\n        /*non pickable but visible circles */\r\n        this._createNonPickableRot(d);\r\n\r\n    }\r\n\r\n    private _createPickableRot(d: number, rCtl: Mesh) {\r\n        let rX = this._createTube(d / 2, this._guideSize);\r\n        let rY = this._createTube(d / 2, this._guideSize);\r\n        let rZ = this._createTube(d / 2, this._guideSize);\r\n        let rAll = this._createTube(d / 1.75, 360);\r\n        rX.name = \"X\";\r\n        rY.name = \"Y\";\r\n        rZ.name = \"Z\";\r\n        rAll.name = \"ALL\";\r\n\r\n        rX.rotation.z = 1.57;\r\n        rZ.rotation.x = -1.57;\r\n        rX.bakeCurrentTransformIntoVertices();\r\n        rZ.bakeCurrentTransformIntoVertices();\r\n\r\n        rAll.rotation.x = 1.57;\r\n\r\n        rX.parent = rCtl;\r\n        rY.parent = rCtl;\r\n        rZ.parent = rCtl;\r\n        rAll.parent = this._pALL;\r\n\r\n        this._rX = rX;\r\n        this._rY = rY;\r\n        this._rZ = rZ;\r\n        this._rAll = rAll;\r\n        this._all_r = [rX, rY, rZ, rAll];\r\n\r\n        this._setVisibility(this._all_r, 0);\r\n\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_r);\r\n    }\r\n\r\n    private _createNonPickableRot(d: number) {\r\n\r\n        let rEndX = this._createCircle(d / 2, this._guideSize, false);\r\n        let rEndY = rEndX.clone(\"\");\r\n        let rEndZ = rEndX.clone(\"\");\r\n        let rEndAll = this._createCircle(d / 1.75, 360, false);\r\n        let rEndAll2 = this._createCircle(d / 2, 360, false);\r\n\r\n        rEndX.parent = this._rX;\r\n        rEndY.parent = this._rY;\r\n        rEndZ.parent = this._rZ;\r\n\r\n        rEndX.rotation.z = 1.57;\r\n        rEndZ.rotation.x = -1.57;\r\n\r\n        rEndAll.parent = this._rAll;\r\n        rEndAll2.parent = this._rAll;\r\n\r\n\r\n        rEndX.color = this._redCol;\r\n        rEndY.color = this._greenCol;\r\n        rEndZ.color = this._blueCol;\r\n        rEndAll.color = this._yellowCol;\r\n        rEndAll2.color = Color3.Gray();\r\n\r\n        this._rEndX = rEndX;\r\n        this._rEndY = rEndY;\r\n        this._rEndZ = rEndZ;\r\n        this._rEndAll = rEndAll;\r\n        this._rEndAll2 = rEndAll2;\r\n        this._all_rEnd = [rEndX, rEndY, rEndZ, rEndAll, rEndAll2];\r\n\r\n        this._setPickableFalse(this._all_rEnd);\r\n        this._setRenderingGroup(this._all_rEnd);\r\n    }\r\n\r\n    private _setVisibility(meshes: Mesh[], v: number) {\r\n        meshes.map((m) => m.visibility = v)\r\n    }\r\n    private _setPickableFalse(meshes: Mesh[]) {\r\n        meshes.map((m) => { m.isPickable = false })\r\n    }\r\n    private _setRenderingGroup(meshes: Mesh[]) {\r\n        meshes.map((m) => m.renderingGroupId = 2)\r\n    }\r\n\r\n    private _extrudeBox(w: number, l: number): Mesh {\r\n        let shape: Vector3[] = [new Vector3(w, w, 0), new Vector3(-w, w, 0), new Vector3(-w, -w, 0), new Vector3(w, -w, 0), new Vector3(w, w, 0)];\r\n        let path: Vector3[] = [new Vector3(0, 0, 0), new Vector3(0, 0, l)];\r\n        let box: Mesh = Mesh.ExtrudeShape(\"\", shape, path, 1, 0, 2, this._scene);\r\n        return box;\r\n    }\r\n\r\n    private _createCircle(r: number, t: number, double: boolean): LinesMesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 5) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        if (double) {\r\n            r = r - 0.04;\r\n            for (let i: number = 0; i <= t; i = i + 5) {\r\n                x = r * Math.cos(i * a);\r\n                if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n                points[p] = new Vector3(x, 0, z);\r\n                p++;\r\n            }\r\n        }\r\n        let circle: LinesMesh = Mesh.CreateLines(\"\", points, this._scene);\r\n        return circle;\r\n    }\r\n\r\n    private _createTube(r: number, t?: number): Mesh {\r\n        if (t === null) t = 360;\r\n        let points: Vector3[] = [];\r\n        let x: number;\r\n        let z: number;\r\n        let a: number = 3.14 / 180;\r\n        let p: number = 0;\r\n        for (let i: number = 0; i <= t; i = i + 30) {\r\n            x = r * Math.cos(i * a);\r\n            if (i == 90) z = r; else if (i == 270) z = -r; else z = r * Math.sin(i * a);\r\n            points[p] = new Vector3(x, 0, z);\r\n            p++;\r\n        }\r\n        let tube: Mesh = Mesh.CreateTube(\"\", points, this._pickWidth * this._axesScale * 2, 3, null, Mesh.NO_CAP, this._scene);\r\n        return tube;\r\n    }\r\n\r\n\r\n    private _sCtl: Mesh;\r\n\r\n    private _sX: Mesh;\r\n    private _sY: Mesh;\r\n    private _sZ: Mesh;\r\n    private _sXZ: Mesh;\r\n    private _sZY: Mesh;\r\n    private _sYX: Mesh;\r\n    private _sAll: Mesh;\r\n    private _all_s: Mesh[];\r\n\r\n    private _sEndX: Mesh;\r\n    private _sEndY: Mesh;\r\n    private _sEndZ: Mesh;\r\n    private _sEndXZ: Mesh;\r\n    private _sEndZY: Mesh;\r\n    private _sEndYX: Mesh;\r\n    private _sEndAll: Mesh;\r\n    private _all_sEnd: Mesh[];\r\n\r\n\r\n    private _createScaleAxes() {\r\n        let r: number = this._pickWidth * 2 * this._axesScale;\r\n        let l: number = this._axesLen * this._axesScale;\r\n\r\n        this._sCtl = new Mesh(\"\", this._scene);\r\n\r\n        /* pickable , invisible part */\r\n        this._createPickableScale(r, l, this._sCtl);\r\n\r\n        /* non pickable visible boxes at end of axes */\r\n        this._createNonPickableScale(r, l);\r\n\r\n\r\n    }\r\n\r\n    private _createPickableScale(r: number, l: number, sCtl: Mesh) {\r\n        let sX: Mesh = this._extrudeBox(r / 2, l);\r\n        sX.name = \"X\";\r\n        let sY: Mesh = sX.clone(\"Y\");\r\n        let sZ: Mesh = sX.clone(\"Z\");\r\n\r\n        let sXZ: Mesh = MeshBuilder.CreatePlane(\"XZ\", { size: r * 2 }, this._scene);\r\n        let sZY: Mesh = MeshBuilder.CreatePlane(\"ZY\", { size: r * 2 }, this._scene);\r\n        let sYX: Mesh = MeshBuilder.CreatePlane(\"YX\", { size: r * 2 }, this._scene);\r\n\r\n\r\n        sXZ.rotation.x = 1.57;\r\n        sZY.rotation.y = -1.57;\r\n\r\n        sXZ.position.x = 2 * r;\r\n        sXZ.position.z = 2 * r;\r\n\r\n        sZY.position.z = 2 * r;\r\n        sZY.position.y = 2 * r;\r\n\r\n        sYX.position.y = 2 * r;\r\n        sYX.position.x = 2 * r;\r\n\r\n        sXZ.bakeCurrentTransformIntoVertices();\r\n        sZY.bakeCurrentTransformIntoVertices();\r\n        sYX.bakeCurrentTransformIntoVertices();\r\n\r\n        let sAll: Mesh = Mesh.CreateBox(\"ALL\", 2 * r, this._scene);\r\n\r\n        sX.parent = sCtl;\r\n        sY.parent = sCtl;\r\n        sZ.parent = sCtl;\r\n        sAll.parent = sCtl;\r\n        sXZ.parent = sCtl;\r\n        sZY.parent = sCtl;\r\n        sYX.parent = sCtl;\r\n\r\n        sX.rotation.y = 1.57;\r\n        sY.rotation.x -= 1.57;\r\n\r\n        this._sX = sX;\r\n        this._sY = sY;\r\n        this._sZ = sZ;\r\n        this._sXZ = sXZ;\r\n        this._sZY = sZY;\r\n        this._sYX = sYX;\r\n        this._sAll = sAll;\r\n        this._all_s = [sX, sY, sZ, sXZ, sZY, sYX, sAll];\r\n\r\n        this._setVisibility(this._all_s, 0);\r\n        //do not want clients picking this\r\n        //we will pick using mesh filter in scene.pick function\r\n        this._setPickableFalse(this._all_s);\r\n    }\r\n\r\n    private _createNonPickableScale(r: number, l: number) {\r\n\r\n        let sEndX = Mesh.CreateBox(\"\", r, this._scene);\r\n        let sEndY = sEndX.clone(\"\");\r\n        let sEndZ = sEndX.clone(\"\");\r\n\r\n        let s = r * 2;\r\n        let sEndXZ = MeshBuilder.CreatePlane(\"XZ\", { size: s }, this._scene);\r\n        let sEndZY = MeshBuilder.CreatePlane(\"ZY\", { size: s }, this._scene);\r\n        let sEndYX = MeshBuilder.CreatePlane(\"YX\", { size: s }, this._scene);\r\n\r\n\r\n        let sEndAll = Mesh.CreateBox(\"ALL\", r, this._scene);\r\n\r\n        sEndXZ.rotation.x = 1.57;\r\n        sEndZY.rotation.y = -1.57;\r\n\r\n        sEndXZ.position.x = s;\r\n        sEndXZ.position.z = s;\r\n\r\n        sEndZY.position.z = s;\r\n        sEndZY.position.y = s;\r\n\r\n        sEndYX.position.y = s;\r\n        sEndYX.position.x = s;\r\n\r\n        sEndX.parent = this._sX;\r\n        sEndY.parent = this._sY;\r\n        sEndZ.parent = this._sZ;\r\n        sEndXZ.parent = this._sXZ;\r\n        sEndZY.parent = this._sZY;\r\n        sEndYX.parent = this._sYX;\r\n        sEndAll.parent = this._sAll;\r\n\r\n        sEndX.position.z = l - r / 2;\r\n        sEndY.position.z = l - r / 2;\r\n        sEndZ.position.z = l - r / 2;\r\n\r\n        sEndX.material = this._redMat;\r\n        sEndY.material = this._greenMat;\r\n        sEndZ.material = this._blueMat;\r\n        sEndXZ.material = this._greenMat;\r\n        sEndZY.material = this._redMat;\r\n        sEndYX.material = this._blueMat;\r\n        sEndAll.material = this._yellowMat;\r\n\r\n        this._sEndX = sEndX;\r\n        this._sEndY = sEndY;\r\n        this._sEndZ = sEndZ;\r\n        this._sEndXZ = sEndXZ;\r\n        this._sEndZY = sEndZY;\r\n        this._sEndYX = sEndYX;\r\n        this._sEndAll = sEndAll;\r\n        this._all_sEnd = [sEndX, sEndY, sEndZ, sEndXZ, sEndZY, sEndYX, sEndAll];\r\n\r\n        this._setPickableFalse(this._all_sEnd);\r\n        this._setRenderingGroup(this._all_sEnd);\r\n    }\r\n\r\n\r\n    /**\r\n     * checks if a have left hand , right hand issue.\r\n     * In other words if a mesh is a LHS mesh in RHS system or \r\n     * a RHS mesh in LHS system\r\n     * The X axis will be reversed in such cases.\r\n     * thus Cross product of X and Y should be inverse of Z.\r\n     * \r\n     */\r\n    //    private _check_LHS_RHS(mesh: Mesh) {\r\n    //        let actualZ = Vector3.Cross(this._localX, this._localY);\r\n    //        //same direction or opposite direction of Z\r\n    //        if (Vector3.Dot(actualZ, this._localZ) < 0) return true;\r\n    //        else return false;\r\n    //    }\r\n\r\n    /**\r\n     * set how transparent the axes are\r\n     * 0 to 1\r\n     * 0 - completely transparent\r\n     * 1 - completely non transparent\r\n     * default is 0.75\r\n     */\r\n    public setVisibility(v: number) {\r\n        this._visibility = v;\r\n    }\r\n    public setLocal(l: boolean) {\r\n        if (this._local == l) return;\r\n        this._local = l;\r\n        if (!l) {\r\n            this._ecRoot.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n    }\r\n\r\n    public isLocal(): boolean {\r\n        return this._local;\r\n    }\r\n\r\n    public setTransSnap(s: boolean) {\r\n        this._snapT = s;\r\n    }\r\n\r\n    public isTransSnap(): boolean {\r\n        return this._snapT;\r\n    }\r\n\r\n    public setRotSnap(s: boolean) {\r\n        this._snapR = s;\r\n    }\r\n    public isRotSnap(): boolean {\r\n        return this._snapR;\r\n    }\r\n\r\n    public setScaleSnap(s: boolean) {\r\n        this._snapS = s;\r\n    }\r\n    public isScaleSnap(): boolean {\r\n        return this._snapS;\r\n    }\r\n\r\n    private _tSnap: Vector3 = new Vector3(this._transSnap, this._transSnap, this._transSnap);\r\n    public setTransSnapValue(t: number) {\r\n        this._tSnap.copyFromFloats(t, t, t);\r\n        this._transSnap = t;\r\n    }\r\n    public getTransSnapValue(): number {\r\n        return this._transSnap;\r\n    }\r\n\r\n    public setRotSnapValue(r: number) {\r\n        this._rotSnap = r;\r\n    }\r\n    public getRotSnapValue(): number {\r\n        return this._rotSnap;\r\n    }\r\n\r\n    public setScaleSnapValue(r: number) {\r\n        this._scaleSnap = r;\r\n    }\r\n    public getScaleSnapValue(): number {\r\n        return this._scaleSnap;\r\n    }\r\n    //few temp vectors & matrix\r\n    private _tv1: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv2: Vector3 = new Vector3(0, 0, 0);\r\n    private _tv3: Vector3 = new Vector3(0, 0, 0);\r\n    private _tm: Matrix = new Matrix();\r\n    private _getAngle2(p1: Vector3, p2: Vector3, cameraPos: Vector3, c2ec: Vector3, mN: Vector3): number {\r\n        /**\r\n         * A) find out if the camera is above , below, left, right of the rotation plane\r\n         */\r\n        //project \"camera to ec\" vector onto mesh normal to get distance to rotation plane\r\n        let d: number = Vector3.Dot(c2ec, mN);\r\n        //scale mesh normal by above ammount to get vector to rotation plane\r\n        mN.scaleToRef(d, this._tv1);\r\n        //get the point of intersection of vector from camera perpendicular to rotation plane\r\n        cameraPos.addToRef(this._tv1, this._tv2);\r\n        let i: Vector3 = this._tv2;//save some typing\r\n        //find the co-ordinate of this point in the cameras frame of reference\r\n        this._mainCamera.getWorldMatrix().invertToRef(this._tm);\r\n        Vector3.TransformCoordinatesToRef(this._tv2, this._tm, this._tv2);\r\n        //find in which quadarant the point (and thus the rotation plane) is in the camera xy plane\r\n        let q: number = 0; //(1=x y,2=-x y,3=-x -y,4=x -y)\r\n        if (i.x >= 0 && i.y >= 0) q = 1;\r\n        else if (i.x <= 0 && i.y >= 0) q = 2;\r\n        else if (i.x <= 0 && i.y <= 0) q = 3;\r\n        else if (i.x >= 0 && i.y <= 0) q = 4;\r\n\r\n        /**\r\n         * B) find out if the user moved pointer up,down, right, left\r\n         */\r\n\r\n        //find movement vector in camera frame of reference\r\n        Vector3.TransformCoordinatesToRef(p1, this._tm, this._tv1);\r\n        Vector3.TransformCoordinatesToRef(p2, this._tm, this._tv2);\r\n        this._tv2.subtractInPlace(this._tv1);\r\n        let mv: Vector3 = this._tv2; //save some typing\r\n        //for now lets set the angle magnitutde same as amount by which the mouse moved\r\n        let angle: number = mv.length();\r\n\r\n        let m: String = \"\";//(u ,d ,r,l)\r\n        if (mv.x >= 0 && mv.y >= 0) {\r\n            if (mv.x >= mv.y) m = \"r\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y >= 0) {\r\n            if (-mv.x >= mv.y) m = \"l\"; else m = \"u\";\r\n        } else if (mv.x <= 0 && mv.y <= 0) {\r\n            if (-mv.x >= -mv.y) m = \"l\"; else m = \"d\";\r\n        } else if (mv.x >= 0 && mv.y <= 0) {\r\n            if (mv.x >= -mv.y) m = \"r\"; else m = \"d\";\r\n        }\r\n\r\n        /**\r\n         * C) decide if the user was trying to rotate clockwise (+1) or anti-clockwise(-1)\r\n         */\r\n\r\n        let r: number = 0;\r\n        //if mouse moved down /up and rotation plane is on  right or left side of user\r\n        if (m == \"d\") {\r\n            if (q == 1 || q == 4) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"u\") {\r\n            if (q == 1 || q == 4) r = -1;\r\n            else r = 1;\r\n            //if mouse moved right/left and  rotation plane is above or below user\r\n        } else if (m == \"r\") {\r\n            if (q == 2 || q == 1) r = 1;\r\n            else r = -1;\r\n        } else if (m == \"l\") {\r\n            if (q == 2 || q == 1) r = -1;\r\n            else r = 1;\r\n        }\r\n\r\n        return r * angle;\r\n    }\r\n\r\n    /**\r\n     * finds the angle subtended from points p1 to p2 around the point p\r\n     * checks if the user was trying to rotate clockwise (+ve in LHS) or anticlockwise (-ve in LHS)\r\n     * to figure this check the orientation of the user(camera)to ec vector with the rotation normal vector\r\n     */\r\n    private _getAngle(p1: Vector3, p2: Vector3, p: Vector3, c2ec: Vector3): number {\r\n        p1.subtractToRef(p, this._tv1);\r\n        p2.subtractToRef(p, this._tv2);\r\n        Vector3.CrossToRef(this._tv1, this._tv2, this._tv3);\r\n        let angle: number = Math.asin(this._tv3.length() / (this._tv1.length() * this._tv2.length()));\r\n        //camera looking down from front of plane or looking up from behind plane\r\n        if ((Vector3.Dot(this._tv3, c2ec) > 0)) {\r\n            angle = -1 * angle;\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    private static _getStandardMaterial(col: Color3, scene: Scene): StandardMaterial {\r\n        let mat: StandardMaterial = new StandardMaterial(\"\", scene);\r\n        mat.emissiveColor = col;\r\n        mat.diffuseColor = Color3.Black();\r\n        mat.specularColor = Color3.Black();\r\n        mat.backFaceCulling = false;\r\n        return mat;\r\n    }\r\n\r\n    private _createMaterials(scene: Scene) {\r\n        this._redMat = EditControl._getStandardMaterial(this._redCol, scene);\r\n        this._greenMat = EditControl._getStandardMaterial(this._greenCol, scene);\r\n        this._blueMat = EditControl._getStandardMaterial(this._blueCol, scene);\r\n        this._whiteMat = EditControl._getStandardMaterial(this._whiteCol, scene);\r\n        this._yellowMat = EditControl._getStandardMaterial(this._yellowCol, scene);\r\n    }\r\n\r\n    private _disposeMaterials() {\r\n        this._redMat.dispose();\r\n        this._greenMat.dispose();\r\n        this._blueMat.dispose();\r\n        this._whiteMat.dispose();\r\n        this._yellowMat.dispose();\r\n    }\r\n\r\n\r\n}\r\n\r\nclass ActHist {\r\n    private mesh: TransformNode;\r\n\r\n    private lastMax: number = 10;\r\n\r\n    private acts: Array<Act> = new Array<Act>();\r\n\r\n    private last: number = -1;\r\n\r\n    private current: number = -1;\r\n\r\n    public constructor(mesh: TransformNode, capacity: number) {\r\n        this.mesh = mesh;\r\n        this.lastMax = capacity - 1;\r\n        this.add();\r\n    }\r\n\r\n    public setCapacity(c: number) {\r\n        if ((c == 0)) {\r\n            console.error(\"capacity should be more than zero\");\r\n            return;\r\n        }\r\n        this.lastMax = c - 1;\r\n        this.last = -1;\r\n        this.current = -1;\r\n        this.acts = new Array<Act>();\r\n        this.add();\r\n    }\r\n\r\n    public add(at?: number) {\r\n        if (at === undefined) at = null;\r\n        let act: Act = new Act(this.mesh, at);\r\n        if ((this.current < this.last)) {\r\n            this.acts.splice(this.current + 1);\r\n            this.last = this.current;\r\n        }\r\n        if ((this.last == this.lastMax)) {\r\n            this.acts.shift();\r\n            this.acts.push(act);\r\n        } else {\r\n            this.acts.push(act);\r\n            this.last++;\r\n            this.current++;\r\n        }\r\n    }\r\n\r\n    public undo(): number {\r\n        if ((this.current > 0)) {\r\n            let at: number = (<Act>this.acts[this.current]).getActionType()\r\n            this.current--;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return at;\r\n        }\r\n    }\r\n\r\n    public redo() {\r\n        if ((this.current < this.last)) {\r\n            this.current++;\r\n            (<Act>this.acts[this.current]).perform(this.mesh);\r\n            return (<Act>this.acts[this.current]).getActionType()\r\n        }\r\n    }\r\n}\r\n\r\nclass Act {\r\n    private _p: Vector3;\r\n\r\n    private _rQ: Quaternion;\r\n    private _rE: Vector3;\r\n\r\n    private _s: Vector3;\r\n\r\n    //actiontype\r\n    private _at: number;\r\n\r\n    public constructor(mesh: TransformNode, at: number) {\r\n        this._p = mesh.position.clone();\r\n        //if (mesh.rotationQuaternion == null) {\r\n        if (mesh.rotationQuaternion == null) {\r\n            this._rQ = null;\r\n            this._rE = mesh.rotation.clone();\r\n        } else {\r\n            this._rQ = mesh.rotationQuaternion.clone();\r\n            this._rE = null;\r\n        }\r\n        this._s = mesh.scaling.clone();\r\n        this._at = at;\r\n    }\r\n\r\n    public getActionType(): number {\r\n        return this._at;\r\n    }\r\n\r\n    public perform(mesh: TransformNode) {\r\n        mesh.position.copyFrom(this._p)\r\n        //check if we are doing euler or quaternion now\r\n        //also check what were we doing when the rotation value\r\n        //was captured and set value accordingly\r\n        if (mesh.rotationQuaternion == null) {\r\n            if (this._rE != null) {\r\n                //mesh.rotation = this.rE.clone();\r\n                mesh.rotation.copyFrom(this._rE);\r\n            } else {\r\n                //mesh.rotation = this.r.toEulerAngles();\r\n                mesh.rotation.copyFrom(this._rQ.toEulerAngles());\r\n            }\r\n        } else {\r\n            if (this._rQ != null) {\r\n                mesh.rotationQuaternion.copyFrom(this._rQ);\r\n            } else {\r\n                //TODO use BABYLON.Quaternion.RotationYawPitchRoll(rot.y, rot.x, rot.z) instead of toQuaternion.\r\n                //mesh.rotationQuaternion.copyFrom(this.rE.toQuaternion());\r\n                mesh.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(this._rE.y, this._rE.x, this._rE.z));\r\n            }\r\n        }\r\n        mesh.scaling.copyFrom(this._s);\r\n    }\r\n}\r\n"],"sourceRoot":""}